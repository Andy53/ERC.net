### YamlMime:ManagedReference
items:
- uid: ERC.Utilities.Payloads
  commentId: T:ERC.Utilities.Payloads
  id: Payloads
  parent: ERC.Utilities
  children:
  - ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])
  - ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.Byte[])
  - ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.String)
  - ERC.Utilities.Payloads.DefaultEgg
  - ERC.Utilities.Payloads.EggHunter32
  - ERC.Utilities.Payloads.EggHunter641
  - ERC.Utilities.Payloads.EggHunter642
  - ERC.Utilities.Payloads.EggHunterConstructor(System.String)
  - ERC.Utilities.Payloads.EggHunterWOW64
  - ERC.Utilities.Payloads.PopPopRet(System.Byte[])
  langs:
  - csharp
  - vb
  name: Payloads
  nameWithType: Payloads
  fullName: ERC.Utilities.Payloads
  type: Class
  source:
    id: Payloads
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 9
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nA collecton of methods which generate payloads.\n"
  example: []
  syntax:
    content: public static class Payloads
    content.vb: Public Module Payloads
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: ERC.Utilities.Payloads.DefaultEgg
  commentId: F:ERC.Utilities.Payloads.DefaultEgg
  id: DefaultEgg
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: DefaultEgg
  nameWithType: Payloads.DefaultEgg
  fullName: ERC.Utilities.Payloads.DefaultEgg
  type: Field
  source:
    id: DefaultEgg
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 35
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nDefault egg hunter tag.\n"
  example: []
  syntax:
    content: public static string DefaultEgg
    return:
      type: System.String
    content.vb: Public Shared DefaultEgg As String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ERC.Utilities.Payloads.EggHunter641
  commentId: F:ERC.Utilities.Payloads.EggHunter641
  id: EggHunter641
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: EggHunter641
  nameWithType: Payloads.EggHunter641
  fullName: ERC.Utilities.Payloads.EggHunter641
  type: Field
  source:
    id: EggHunter641
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 40
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nA 64 bit egg hunter.\n"
  example: []
  syntax:
    content: public static byte[] EggHunter641
    return:
      type: System.Byte[]
    content.vb: Public Shared EggHunter641 As Byte()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ERC.Utilities.Payloads.EggHunter642
  commentId: F:ERC.Utilities.Payloads.EggHunter642
  id: EggHunter642
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: EggHunter642
  nameWithType: Payloads.EggHunter642
  fullName: ERC.Utilities.Payloads.EggHunter642
  type: Field
  source:
    id: EggHunter642
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 51
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nA second 64 bit egg hunter.\n"
  example: []
  syntax:
    content: public static byte[] EggHunter642
    return:
      type: System.Byte[]
    content.vb: Public Shared EggHunter642 As Byte()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ERC.Utilities.Payloads.EggHunter32
  commentId: F:ERC.Utilities.Payloads.EggHunter32
  id: EggHunter32
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: EggHunter32
  nameWithType: Payloads.EggHunter32
  fullName: ERC.Utilities.Payloads.EggHunter32
  type: Field
  source:
    id: EggHunter32
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 60
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nA 32 bit egg hunter.\n"
  example: []
  syntax:
    content: public static byte[] EggHunter32
    return:
      type: System.Byte[]
    content.vb: Public Shared EggHunter32 As Byte()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ERC.Utilities.Payloads.EggHunterWOW64
  commentId: F:ERC.Utilities.Payloads.EggHunterWOW64
  id: EggHunterWOW64
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: EggHunterWOW64
  nameWithType: Payloads.EggHunterWOW64
  fullName: ERC.Utilities.Payloads.EggHunterWOW64
  type: Field
  source:
    id: EggHunterWOW64
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 69
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nAn egg hunter that will work on 32 bit systems or 32 bit processes running under WOW64.\n"
  example: []
  syntax:
    content: public static byte[] EggHunterWOW64
    return:
      type: System.Byte[]
    content.vb: Public Shared EggHunterWOW64 As Byte()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])
  commentId: M:ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])
  id: ByteArrayConstructor(System.Byte[])
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: ByteArrayConstructor(Byte[])
  nameWithType: Payloads.ByteArrayConstructor(Byte[])
  fullName: ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte[])
  type: Method
  source:
    id: ByteArrayConstructor
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 85
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nCreates an array of all possible byte values except those passed to the function. \n"
  example: []
  syntax:
    content: public static byte[] ByteArrayConstructor(byte[] unwantedBytes)
    parameters:
    - id: unwantedBytes
      type: System.Byte[]
      description: Takes a byte array of bytes to be excluded
    return:
      type: System.Byte[]
      description: Returns an array of all other possible bytes.
    content.vb: Public Shared Function ByteArrayConstructor(unwantedBytes As Byte()) As Byte()
  overload: ERC.Utilities.Payloads.ByteArrayConstructor*
  nameWithType.vb: Payloads.ByteArrayConstructor(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ERC.Utilities.Payloads.ByteArrayConstructor(System.Byte())
  name.vb: ByteArrayConstructor(Byte())
- uid: ERC.Utilities.Payloads.EggHunterConstructor(System.String)
  commentId: M:ERC.Utilities.Payloads.EggHunterConstructor(System.String)
  id: EggHunterConstructor(System.String)
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: EggHunterConstructor(String)
  nameWithType: Payloads.EggHunterConstructor(String)
  fullName: ERC.Utilities.Payloads.EggHunterConstructor(System.String)
  type: Method
  source:
    id: EggHunterConstructor
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 126
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nGenerates a selection of EggHunter payloads. A custom tag can be specified, if no tag is specified EggHunters will search for the default tag (ERCD)\n"
  example: []
  syntax:
    content: public static Dictionary<string, byte[]> EggHunterConstructor(string tag = null)
    parameters:
    - id: tag
      type: System.String
      description: A custom tag which the egg hunters will search for.
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Byte[]}
      description: Returns a dictionary containing a list of EggHunters and string detailing them
    content.vb: Public Shared Function EggHunterConstructor(tag As String = Nothing) As Dictionary(Of String, Byte())
  overload: ERC.Utilities.Payloads.EggHunterConstructor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ERC.Utilities.Payloads.PopPopRet(System.Byte[])
  commentId: M:ERC.Utilities.Payloads.PopPopRet(System.Byte[])
  id: PopPopRet(System.Byte[])
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: PopPopRet(Byte[])
  nameWithType: Payloads.PopPopRet(Byte[])
  fullName: ERC.Utilities.Payloads.PopPopRet(System.Byte[])
  type: Method
  source:
    id: PopPopRet
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 200
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nFinds all instances of POP X POP X RET in a given byte array. \n"
  example: []
  syntax:
    content: public static List<int> PopPopRet(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
      description: Byte array to be searched
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: Returns an array of integers containing the offsets of the instruction sets.
    content.vb: Public Shared Function PopPopRet(data As Byte()) As List(Of Integer)
  overload: ERC.Utilities.Payloads.PopPopRet*
  nameWithType.vb: Payloads.PopPopRet(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ERC.Utilities.Payloads.PopPopRet(System.Byte())
  name.vb: PopPopRet(Byte())
- uid: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.Byte[])
  commentId: M:ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.Byte[])
  id: ByteCompare(ERC.ProcessInfo,System.IntPtr,System.Byte[])
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: ByteCompare(ProcessInfo, IntPtr, Byte[])
  nameWithType: Payloads.ByteCompare(ProcessInfo, IntPtr, Byte[])
  fullName: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo, System.IntPtr, System.Byte[])
  type: Method
  source:
    id: ByteCompare
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 305
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nCompares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify \nbytes which can not be passed into a program without corrupting the input.\n"
  example: []
  syntax:
    content: public static Tuple<bool, byte[], byte[]> ByteCompare(ProcessInfo info, IntPtr startAddress, byte[] bytes)
    parameters:
    - id: info
      type: ERC.ProcessInfo
      description: The process to compare memory from
    - id: startAddress
      type: System.IntPtr
      description: The address at which to start the comparison
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the bytes to be compared
    return:
      type: System.Tuple{System.Boolean,System.Byte[],System.Byte[]}
      description: "Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing \nthe bytes provided and a byte array containing the bytes read from process memory"
    content.vb: Public Shared Function ByteCompare(info As ProcessInfo, startAddress As IntPtr, bytes As Byte()) As Tuple(Of Boolean, Byte(), Byte())
  overload: ERC.Utilities.Payloads.ByteCompare*
  nameWithType.vb: Payloads.ByteCompare(ProcessInfo, IntPtr, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo, System.IntPtr, System.Byte())
  name.vb: ByteCompare(ProcessInfo, IntPtr, Byte())
- uid: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.String)
  commentId: M:ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo,System.IntPtr,System.String)
  id: ByteCompare(ERC.ProcessInfo,System.IntPtr,System.String)
  parent: ERC.Utilities.Payloads
  langs:
  - csharp
  - vb
  name: ByteCompare(ProcessInfo, IntPtr, String)
  nameWithType: Payloads.ByteCompare(ProcessInfo, IntPtr, String)
  fullName: ERC.Utilities.Payloads.ByteCompare(ERC.ProcessInfo, System.IntPtr, System.String)
  type: Method
  source:
    id: ByteCompare
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Payloads.cs
    startLine: 328
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nCompares a byte array with an area in memory of equal size. This method should be used in conjunction with the ByteArrayConstructor to identify \nbytes which can not be passed into a program without corrupting the input.\n"
  example: []
  syntax:
    content: public static Tuple<bool, byte[], byte[]> ByteCompare(ProcessInfo info, IntPtr startAddress, string byteFilePath)
    parameters:
    - id: info
      type: ERC.ProcessInfo
      description: The process to compare memory from
    - id: startAddress
      type: System.IntPtr
      description: The address at which to start the comparison
    - id: byteFilePath
      type: System.String
      description: The path to a file containing the bytes to be compared
    return:
      type: System.Tuple{System.Boolean,System.Byte[],System.Byte[]}
      description: "Returns a Tuple containing a bool which is true if the comparison was identical and false if it was not, a byte array containing \nthe bytes provided and a byte array containing the bytes read from process memory"
    content.vb: Public Shared Function ByteCompare(info As ProcessInfo, startAddress As IntPtr, byteFilePath As String) As Tuple(Of Boolean, Byte(), Byte())
  overload: ERC.Utilities.Payloads.ByteCompare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: ERC.Utilities
  commentId: N:ERC.Utilities
  name: ERC.Utilities
  nameWithType: ERC.Utilities
  fullName: ERC.Utilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: ERC.Utilities.Payloads.ByteArrayConstructor*
  commentId: Overload:ERC.Utilities.Payloads.ByteArrayConstructor
  name: ByteArrayConstructor
  nameWithType: Payloads.ByteArrayConstructor
  fullName: ERC.Utilities.Payloads.ByteArrayConstructor
- uid: ERC.Utilities.Payloads.EggHunterConstructor*
  commentId: Overload:ERC.Utilities.Payloads.EggHunterConstructor
  name: EggHunterConstructor
  nameWithType: Payloads.EggHunterConstructor
  fullName: ERC.Utilities.Payloads.EggHunterConstructor
- uid: System.Collections.Generic.Dictionary{System.String,System.Byte[]}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Byte[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Byte[]>
  nameWithType: Dictionary<String, Byte[]>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Byte[]>
  nameWithType.vb: Dictionary(Of String, Byte())
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Byte())
  name.vb: Dictionary(Of String, Byte())
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: ERC.Utilities.Payloads.PopPopRet*
  commentId: Overload:ERC.Utilities.Payloads.PopPopRet
  name: PopPopRet
  nameWithType: Payloads.PopPopRet
  fullName: ERC.Utilities.Payloads.PopPopRet
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.Utilities.Payloads.ByteCompare*
  commentId: Overload:ERC.Utilities.Payloads.ByteCompare
  name: ByteCompare
  nameWithType: Payloads.ByteCompare
  fullName: ERC.Utilities.Payloads.ByteCompare
- uid: ERC.ProcessInfo
  commentId: T:ERC.ProcessInfo
  parent: ERC
  name: ProcessInfo
  nameWithType: ProcessInfo
  fullName: ERC.ProcessInfo
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Tuple{System.Boolean,System.Byte[],System.Byte[]}
  commentId: T:System.Tuple{System.Boolean,System.Byte[],System.Byte[]}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Boolean, Byte[], Byte[]>
  nameWithType: Tuple<Boolean, Byte[], Byte[]>
  fullName: System.Tuple<System.Boolean, System.Byte[], System.Byte[]>
  nameWithType.vb: Tuple(Of Boolean, Byte(), Byte())
  fullName.vb: System.Tuple(Of System.Boolean, System.Byte(), System.Byte())
  name.vb: Tuple(Of Boolean, Byte(), Byte())
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC
  commentId: N:ERC
  name: ERC
  nameWithType: ERC
  fullName: ERC
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
