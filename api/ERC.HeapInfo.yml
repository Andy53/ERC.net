### YamlMime:ManagedReference
items:
- uid: ERC.HeapInfo
  commentId: T:ERC.HeapInfo
  id: HeapInfo
  parent: ERC
  children:
  - ERC.HeapInfo.#ctor(ERC.ProcessInfo)
  - ERC.HeapInfo.HeapIDs
  - ERC.HeapInfo.HeapStatistics(System.Boolean,System.UInt64,System.String)
  - ERC.HeapInfo.SearchHeap(System.Byte[],System.UInt64,System.String)
  langs:
  - csharp
  - vb
  name: HeapInfo
  nameWithType: HeapInfo
  fullName: ERC.HeapInfo
  type: Class
  source:
    id: HeapInfo
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Heap_Info.cs
    startLine: 10
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nContains all information relating to a specific heap.\n"
  example: []
  syntax:
    content: public class HeapInfo
    content.vb: Public Class HeapInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: ERC.HeapInfo.#ctor(ERC.ProcessInfo)
  commentId: M:ERC.HeapInfo.#ctor(ERC.ProcessInfo)
  id: '#ctor(ERC.ProcessInfo)'
  parent: ERC.HeapInfo
  langs:
  - csharp
  - vb
  name: HeapInfo(ProcessInfo)
  nameWithType: HeapInfo.HeapInfo(ProcessInfo)
  fullName: ERC.HeapInfo.HeapInfo(ERC.ProcessInfo)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Heap_Info.cs
    startLine: 25
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nHeapInfo Constructor\n"
  example: []
  syntax:
    content: public HeapInfo(ProcessInfo info)
    parameters:
    - id: info
      type: ERC.ProcessInfo
      description: ProcessInfo object for the associated process.
    content.vb: Public Sub New(info As ProcessInfo)
  overload: ERC.HeapInfo.#ctor*
  exceptions:
  - type: ERC.ERCException
    commentId: T:ERC.ERCException
    description: Throws an ERCException if the provided handle or response are invalid.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.HeapInfo.SearchHeap(System.Byte[],System.UInt64,System.String)
  commentId: M:ERC.HeapInfo.SearchHeap(System.Byte[],System.UInt64,System.String)
  id: SearchHeap(System.Byte[],System.UInt64,System.String)
  parent: ERC.HeapInfo
  langs:
  - csharp
  - vb
  name: SearchHeap(Byte[], UInt64, String)
  nameWithType: HeapInfo.SearchHeap(Byte[], UInt64, String)
  fullName: ERC.HeapInfo.SearchHeap(System.Byte[], System.UInt64, System.String)
  type: Method
  source:
    id: SearchHeap
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Heap_Info.cs
    startLine: 87
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nSearches heap entries for a specified pattern. Returns pointers to all instances of the pattern. If heapID and startAddress are both supplied heapID takes precedence.\n"
  example: []
  syntax:
    content: public ErcResult<List<Tuple<IntPtr, IntPtr, IntPtr>>> SearchHeap(byte[] searchBytes, ulong heapID = 0UL, string hexStartAddress = "")
    parameters:
    - id: searchBytes
      type: System.Byte[]
      description: byte array containing the pattern to search for
    - id: heapID
      type: System.UInt64
      description: ID of the heap to be searched(Optional)
    - id: hexStartAddress
      type: System.String
      description: Start address of the heap entry to be searched in hexadecimal(Optional)
    return:
      type: ERC.ErcResult{System.Collections.Generic.List{System.Tuple{System.IntPtr,System.IntPtr,System.IntPtr}}}
      description: Returns an ERCResult of IntPtr containing pointers to all instances of the pattern found.
    content.vb: Public Function SearchHeap(searchBytes As Byte(), heapID As ULong = 0UL, hexStartAddress As String = "") As ErcResult(Of List(Of Tuple(Of IntPtr, IntPtr, IntPtr)))
  overload: ERC.HeapInfo.SearchHeap*
  nameWithType.vb: HeapInfo.SearchHeap(Byte(), UInt64, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ERC.HeapInfo.SearchHeap(System.Byte(), System.UInt64, System.String)
  name.vb: SearchHeap(Byte(), UInt64, String)
- uid: ERC.HeapInfo.HeapStatistics(System.Boolean,System.UInt64,System.String)
  commentId: M:ERC.HeapInfo.HeapStatistics(System.Boolean,System.UInt64,System.String)
  id: HeapStatistics(System.Boolean,System.UInt64,System.String)
  parent: ERC.HeapInfo
  langs:
  - csharp
  - vb
  name: HeapStatistics(Boolean, UInt64, String)
  nameWithType: HeapInfo.HeapStatistics(Boolean, UInt64, String)
  fullName: ERC.HeapInfo.HeapStatistics(System.Boolean, System.UInt64, System.String)
  type: Method
  source:
    id: HeapStatistics
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Heap_Info.cs
    startLine: 231
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nReturns a collections of stats related to the heap of the current process object. If both heapID and startAddress are specified heapID takes precedence.\n"
  example: []
  syntax:
    content: public ErcResult<List<string>> HeapStatistics(bool extended = false, ulong heapID = 0UL, string hexStartAddress = "")
    parameters:
    - id: extended
      type: System.Boolean
      description: display an extended set of stats
    - id: heapID
      type: System.UInt64
      description: The ID of the heap to display stats for. (optional)
    - id: hexStartAddress
      type: System.String
      description: The start address of the specific heap block to display stats for in hexadecimal. (optional)
    return:
      type: ERC.ErcResult{System.Collections.Generic.List{System.String}}
      description: returns a List string object
    content.vb: Public Function HeapStatistics(extended As Boolean = False, heapID As ULong = 0UL, hexStartAddress As String = "") As ErcResult(Of List(Of String))
  overload: ERC.HeapInfo.HeapStatistics*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.HeapInfo.HeapIDs
  commentId: M:ERC.HeapInfo.HeapIDs
  id: HeapIDs
  parent: ERC.HeapInfo
  langs:
  - csharp
  - vb
  name: HeapIDs()
  nameWithType: HeapInfo.HeapIDs()
  fullName: ERC.HeapInfo.HeapIDs()
  type: Method
  source:
    id: HeapIDs
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Heap_Info.cs
    startLine: 450
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nLists all HeapIDs associated with a process.\n"
  example: []
  syntax:
    content: public ErcResult<List<ulong>> HeapIDs()
    return:
      type: ERC.ErcResult{System.Collections.Generic.List{System.UInt64}}
      description: Returns an ErcResult List ulong&quot;
    content.vb: Public Function HeapIDs As ErcResult(Of List(Of ULong))
  overload: ERC.HeapInfo.HeapIDs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: ERC
  commentId: N:ERC
  name: ERC
  nameWithType: ERC
  fullName: ERC
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ERC.ERCException
  commentId: T:ERC.ERCException
  name: ERCException
  nameWithType: ERCException
  fullName: ERC.ERCException
- uid: ERC.HeapInfo.#ctor*
  commentId: Overload:ERC.HeapInfo.#ctor
  name: HeapInfo
  nameWithType: HeapInfo.HeapInfo
  fullName: ERC.HeapInfo.HeapInfo
- uid: ERC.ProcessInfo
  commentId: T:ERC.ProcessInfo
  parent: ERC
  name: ProcessInfo
  nameWithType: ProcessInfo
  fullName: ERC.ProcessInfo
- uid: ERC.HeapInfo.SearchHeap*
  commentId: Overload:ERC.HeapInfo.SearchHeap
  name: SearchHeap
  nameWithType: HeapInfo.SearchHeap
  fullName: ERC.HeapInfo.SearchHeap
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ERC.ErcResult{System.Collections.Generic.List{System.Tuple{System.IntPtr,System.IntPtr,System.IntPtr}}}
  commentId: T:ERC.ErcResult{System.Collections.Generic.List{System.Tuple{System.IntPtr,System.IntPtr,System.IntPtr}}}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<List<Tuple<IntPtr, IntPtr, IntPtr>>>
  nameWithType: ErcResult<List<Tuple<IntPtr, IntPtr, IntPtr>>>
  fullName: ERC.ErcResult<System.Collections.Generic.List<System.Tuple<System.IntPtr, System.IntPtr, System.IntPtr>>>
  nameWithType.vb: ErcResult(Of List(Of Tuple(Of IntPtr, IntPtr, IntPtr)))
  fullName.vb: ERC.ErcResult(Of System.Collections.Generic.List(Of System.Tuple(Of System.IntPtr, System.IntPtr, System.IntPtr)))
  name.vb: ErcResult(Of List(Of Tuple(Of IntPtr, IntPtr, IntPtr)))
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcResult`1
  commentId: T:ERC.ErcResult`1
  name: ErcResult<T>
  nameWithType: ErcResult<T>
  fullName: ERC.ErcResult<T>
  nameWithType.vb: ErcResult(Of T)
  fullName.vb: ERC.ErcResult(Of T)
  name.vb: ErcResult(Of T)
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.HeapInfo.HeapStatistics*
  commentId: Overload:ERC.HeapInfo.HeapStatistics
  name: HeapStatistics
  nameWithType: HeapInfo.HeapStatistics
  fullName: ERC.HeapInfo.HeapStatistics
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: ERC.ErcResult{System.Collections.Generic.List{System.String}}
  commentId: T:ERC.ErcResult{System.Collections.Generic.List{System.String}}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<List<String>>
  nameWithType: ErcResult<List<String>>
  fullName: ERC.ErcResult<System.Collections.Generic.List<System.String>>
  nameWithType.vb: ErcResult(Of List(Of String))
  fullName.vb: ERC.ErcResult(Of System.Collections.Generic.List(Of System.String))
  name.vb: ErcResult(Of List(Of String))
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.HeapInfo.HeapIDs*
  commentId: Overload:ERC.HeapInfo.HeapIDs
  name: HeapIDs
  nameWithType: HeapInfo.HeapIDs
  fullName: ERC.HeapInfo.HeapIDs
- uid: ERC.ErcResult{System.Collections.Generic.List{System.UInt64}}
  commentId: T:ERC.ErcResult{System.Collections.Generic.List{System.UInt64}}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<List<UInt64>>
  nameWithType: ErcResult<List<UInt64>>
  fullName: ERC.ErcResult<System.Collections.Generic.List<System.UInt64>>
  nameWithType.vb: ErcResult(Of List(Of UInt64))
  fullName.vb: ERC.ErcResult(Of System.Collections.Generic.List(Of System.UInt64))
  name.vb: ErcResult(Of List(Of UInt64))
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
