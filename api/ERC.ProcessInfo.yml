### YamlMime:ManagedReference
items:
- uid: ERC.ProcessInfo
  commentId: T:ERC.ProcessInfo
  id: ProcessInfo
  parent: ERC
  children:
  - ERC.ProcessInfo.#ctor(ERC.ErcCore,System.Diagnostics.Process)
  - ERC.ProcessInfo.#ctor(ERC.ErcCore,System.IntPtr)
  - ERC.ProcessInfo.#ctor(ERC.ProcessInfo)
  - ERC.ProcessInfo.CreateExcludesList(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr,System.Int32)
  - ERC.ProcessInfo.FindNRP(System.Int32,System.Boolean)
  - ERC.ProcessInfo.GetModuleHandles
  - ERC.ProcessInfo.GetProcessModuleInformation
  - ERC.ProcessInfo.GetProcessModules
  - ERC.ProcessInfo.GetProcessThreadInformation
  - ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)
  - ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)
  - ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore,System.String)
  - ERC.ProcessInfo.ModulesInfo
  - ERC.ProcessInfo.ProcessCurrent
  - ERC.ProcessInfo.ProcessDescription
  - ERC.ProcessInfo.ProcessHandle
  - ERC.ProcessInfo.ProcessID
  - ERC.ProcessInfo.ProcessMachineType
  - ERC.ProcessInfo.ProcessName
  - ERC.ProcessInfo.ProcessPath
  - ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[],System.Collections.Generic.List{System.String})
  - ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List{System.String})
  - ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String})
  - ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.String,System.Collections.Generic.List{System.String})
  - ERC.ProcessInfo.SearchModules(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})
  - ERC.ProcessInfo.ThreadsInfo
  - ERC.ProcessInfo.ToString
  langs:
  - csharp
  - vb
  name: ProcessInfo
  nameWithType: ProcessInfo
  fullName: ERC.ProcessInfo
  type: Class
  source:
    id: ProcessInfo
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 15
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: 'Contains information needed for the associated functions relating to the process. '
  example: []
  syntax:
    content: 'public class ProcessInfo : ErcCore'
    content.vb: >-
      Public Class ProcessInfo

          Inherits ErcCore
  inheritance:
  - System.Object
  - ERC.ErcCore
  derivedClasses:
  - ERC.Utilities.OpcodeAssembler
  - ERC.Utilities.OpcodeDisassembler
  inheritedMembers:
  - ERC.ErcCore.ErcVersion
  - ERC.ErcCore.WorkingDirectory
  - ERC.ErcCore.Author
  - ERC.ErcCore.SystemErrorLogPath
  - ERC.ErcCore.PatternStandardPath
  - ERC.ErcCore.PatternExtendedPath
  - ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)
  - ERC.ErcCore.SetWorkingDirectory(System.String)
  - ERC.ErcCore.SetPatternStandardPath(System.String)
  - ERC.ErcCore.SetPatternExtendedPath(System.String)
  - ERC.ErcCore.SetAuthor(System.String)
  - ERC.ErcCore.SetErrorFile(System.String)
  - ERC.ErcCore.LogEvent(System.Exception)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: ERC.ProcessInfo.ProcessName
  commentId: P:ERC.ProcessInfo.ProcessName
  id: ProcessName
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessName
  nameWithType: ProcessInfo.ProcessName
  fullName: ERC.ProcessInfo.ProcessName
  type: Property
  source:
    id: ProcessName
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 19
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: 'Name of the process. '
  example: []
  syntax:
    content: public string ProcessName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ProcessName As String
  overload: ERC.ProcessInfo.ProcessName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: ERC.ProcessInfo.ProcessDescription
  commentId: P:ERC.ProcessInfo.ProcessDescription
  id: ProcessDescription
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessDescription
  nameWithType: ProcessInfo.ProcessDescription
  fullName: ERC.ProcessInfo.ProcessDescription
  type: Property
  source:
    id: ProcessDescription
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 21
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: 'Process description. '
  example: []
  syntax:
    content: public string ProcessDescription { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ProcessDescription As String
  overload: ERC.ProcessInfo.ProcessDescription*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: ERC.ProcessInfo.ProcessPath
  commentId: P:ERC.ProcessInfo.ProcessPath
  id: ProcessPath
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessPath
  nameWithType: ProcessInfo.ProcessPath
  fullName: ERC.ProcessInfo.ProcessPath
  type: Property
  source:
    id: ProcessPath
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 23
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: 'Path for the projects main module. '
  example: []
  syntax:
    content: public string ProcessPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ProcessPath As String
  overload: ERC.ProcessInfo.ProcessPath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: ERC.ProcessInfo.ProcessID
  commentId: P:ERC.ProcessInfo.ProcessID
  id: ProcessID
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessID
  nameWithType: ProcessInfo.ProcessID
  fullName: ERC.ProcessInfo.ProcessID
  type: Property
  source:
    id: ProcessID
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 25
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: 'Process ID. '
  example: []
  syntax:
    content: public int ProcessID { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ProcessID As Integer
  overload: ERC.ProcessInfo.ProcessID*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: ERC.ProcessInfo.ProcessHandle
  commentId: P:ERC.ProcessInfo.ProcessHandle
  id: ProcessHandle
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessHandle
  nameWithType: ProcessInfo.ProcessHandle
  fullName: ERC.ProcessInfo.ProcessHandle
  type: Property
  source:
    id: ProcessHandle
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 28
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: 'Handle for the process. '
  example: []
  syntax:
    content: public IntPtr ProcessHandle { get; }
    parameters: []
    return:
      type: System.IntPtr
    content.vb: Public ReadOnly Property ProcessHandle As IntPtr
  overload: ERC.ProcessInfo.ProcessHandle*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: ERC.ProcessInfo.ProcessCurrent
  commentId: P:ERC.ProcessInfo.ProcessCurrent
  id: ProcessCurrent
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessCurrent
  nameWithType: ProcessInfo.ProcessCurrent
  fullName: ERC.ProcessInfo.ProcessCurrent
  type: Property
  source:
    id: ProcessCurrent
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 30
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: '.Net Process object for this process '
  example: []
  syntax:
    content: public Process ProcessCurrent { get; }
    parameters: []
    return:
      type: System.Diagnostics.Process
    content.vb: Public ReadOnly Property ProcessCurrent As Process
  overload: ERC.ProcessInfo.ProcessCurrent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: ERC.ProcessInfo.ProcessMachineType
  commentId: P:ERC.ProcessInfo.ProcessMachineType
  id: ProcessMachineType
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessMachineType
  nameWithType: ProcessInfo.ProcessMachineType
  fullName: ERC.ProcessInfo.ProcessMachineType
  type: Property
  source:
    id: ProcessMachineType
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 32
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: 'The machine type the process runs on. Eg. x86 or x64 '
  example: []
  syntax:
    content: public MachineType ProcessMachineType { get; }
    parameters: []
    return:
      type: ERC.MachineType
    content.vb: Public ReadOnly Property ProcessMachineType As MachineType
  overload: ERC.ProcessInfo.ProcessMachineType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: ERC.ProcessInfo.ModulesInfo
  commentId: F:ERC.ProcessInfo.ModulesInfo
  id: ModulesInfo
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ModulesInfo
  nameWithType: ProcessInfo.ModulesInfo
  fullName: ERC.ProcessInfo.ModulesInfo
  type: Field
  source:
    id: ModulesInfo
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 35
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: 'A list containing ModuleInfo objects associuted with the process. /// '
  example: []
  syntax:
    content: public List<ModuleInfo> ModulesInfo
    return:
      type: System.Collections.Generic.List{ERC.ModuleInfo}
    content.vb: Public ModulesInfo As List(Of ModuleInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.ThreadsInfo
  commentId: F:ERC.ProcessInfo.ThreadsInfo
  id: ThreadsInfo
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ThreadsInfo
  nameWithType: ProcessInfo.ThreadsInfo
  fullName: ERC.ProcessInfo.ThreadsInfo
  type: Field
  source:
    id: ThreadsInfo
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 37
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: 'A list containing ThreadInfo objects associuted with the process. /// '
  example: []
  syntax:
    content: public List<ThreadInfo> ThreadsInfo
    return:
      type: System.Collections.Generic.List{ERC.ThreadInfo}
    content.vb: Public ThreadsInfo As List(Of ThreadInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.#ctor(ERC.ErcCore,System.Diagnostics.Process)
  commentId: M:ERC.ProcessInfo.#ctor(ERC.ErcCore,System.Diagnostics.Process)
  id: '#ctor(ERC.ErcCore,System.Diagnostics.Process)'
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessInfo(ErcCore, Process)
  nameWithType: ProcessInfo.ProcessInfo(ErcCore, Process)
  fullName: ERC.ProcessInfo.ProcessInfo(ERC.ErcCore, System.Diagnostics.Process)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 52
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nConstructor for the Process_Info object, requires an ERC_Core object and a Process.\n"
  example: []
  syntax:
    content: public ProcessInfo(ErcCore core, Process process)
    parameters:
    - id: core
      type: ERC.ErcCore
      description: An ErcCore object
    - id: process
      type: System.Diagnostics.Process
      description: The process to gather information from
    content.vb: Public Sub New(core As ErcCore, process As Process)
  overload: ERC.ProcessInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.#ctor(ERC.ErcCore,System.IntPtr)
  commentId: M:ERC.ProcessInfo.#ctor(ERC.ErcCore,System.IntPtr)
  id: '#ctor(ERC.ErcCore,System.IntPtr)'
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessInfo(ErcCore, IntPtr)
  nameWithType: ProcessInfo.ProcessInfo(ErcCore, IntPtr)
  fullName: ERC.ProcessInfo.ProcessInfo(ERC.ErcCore, System.IntPtr)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 104
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nConstructor for the Process_Info object, requires an ERC_Core object and a Process.\n"
  example: []
  syntax:
    content: public ProcessInfo(ErcCore core, IntPtr handle)
    parameters:
    - id: core
      type: ERC.ErcCore
      description: An ErcCore object
    - id: handle
      type: System.IntPtr
      description: The handle for the process to gather information from
    content.vb: Public Sub New(core As ErcCore, handle As IntPtr)
  overload: ERC.ProcessInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.#ctor(ERC.ProcessInfo)
  commentId: M:ERC.ProcessInfo.#ctor(ERC.ProcessInfo)
  id: '#ctor(ERC.ProcessInfo)'
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ProcessInfo(ProcessInfo)
  nameWithType: ProcessInfo.ProcessInfo(ProcessInfo)
  fullName: ERC.ProcessInfo.ProcessInfo(ERC.ProcessInfo)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 164
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nConstructor to use when inheriting from ProcessInfo.\n"
  example: []
  syntax:
    content: protected ProcessInfo(ProcessInfo parent)
    parameters:
    - id: parent
      type: ERC.ProcessInfo
      description: The object to inherit from
    content.vb: Protected Sub New(parent As ProcessInfo)
  overload: ERC.ProcessInfo.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)
  commentId: M:ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)
  id: ListLocalProcesses(ERC.ErcCore)
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ListLocalProcesses(ErcCore)
  nameWithType: ProcessInfo.ListLocalProcesses(ErcCore)
  fullName: ERC.ProcessInfo.ListLocalProcesses(ERC.ErcCore)
  type: Method
  source:
    id: ListLocalProcesses
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 192
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nGets a list of running processes on the host and removes unusable processes (such as system processes etc)\n"
  example: []
  syntax:
    content: public static ErcResult<Process[]> ListLocalProcesses(ErcCore core)
    parameters:
    - id: core
      type: ERC.ErcCore
      description: An ErcCore object
    return:
      type: ERC.ErcResult{System.Diagnostics.Process[]}
      description: Returns an ErcResult containing a list of all supported processes
    content.vb: Public Shared Function ListLocalProcesses(core As ErcCore) As ErcResult(Of Process())
  overload: ERC.ProcessInfo.ListLocalProcesses*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore,System.String)
  commentId: M:ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore,System.String)
  id: ListRemoteProcesses(ERC.ErcCore,System.String)
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ListRemoteProcesses(ErcCore, String)
  nameWithType: ProcessInfo.ListRemoteProcesses(ErcCore, String)
  fullName: ERC.ProcessInfo.ListRemoteProcesses(ERC.ErcCore, System.String)
  type: Method
  source:
    id: ListRemoteProcesses
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 234
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nGets a list of running processes on the host and removes unusable processes.\n"
  example: []
  syntax:
    content: public static ErcResult<Process[]> ListRemoteProcesses(ErcCore core, string machineName)
    parameters:
    - id: core
      type: ERC.ErcCore
      description: An ErcCore object
    - id: machineName
      type: System.String
      description: The computer from which to read the list of processes. Can be either the hostname or IP address.
    return:
      type: ERC.ErcResult{System.Diagnostics.Process[]}
      description: Returns an ErcResult containing a list of all supported processes
    content.vb: Public Shared Function ListRemoteProcesses(core As ErcCore, machineName As String) As ErcResult(Of Process())
  overload: ERC.ProcessInfo.ListRemoteProcesses*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ERC.ProcessInfo.GetProcessModules
  commentId: M:ERC.ProcessInfo.GetProcessModules
  id: GetProcessModules
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: GetProcessModules()
  nameWithType: ProcessInfo.GetProcessModules()
  fullName: ERC.ProcessInfo.GetProcessModules()
  type: Method
  source:
    id: GetProcessModules
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 282
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nReturns a list of files loaded by the current process as List String\n"
  example: []
  syntax:
    content: public ErcResult<Dictionary<string, IntPtr>> GetProcessModules()
    return:
      type: ERC.ErcResult{System.Collections.Generic.Dictionary{System.String,System.IntPtr}}
      description: Returns an ErcResult containing a Dictionary of module names and the associated handles
    content.vb: Public Function GetProcessModules As ErcResult(Of Dictionary(Of String, IntPtr))
  overload: ERC.ProcessInfo.GetProcessModules*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)
  commentId: M:ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)
  id: Is64Bit(System.Diagnostics.Process)
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: Is64Bit(Process)
  nameWithType: ProcessInfo.Is64Bit(Process)
  fullName: ERC.ProcessInfo.Is64Bit(System.Diagnostics.Process)
  type: Method
  source:
    id: Is64Bit
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 339
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nIdentifies if a process is 64bit or 32 bit, returns true for 64bit and false for 32bit.\n"
  example: []
  syntax:
    content: public static bool Is64Bit(Process process)
    parameters:
    - id: process
      type: System.Diagnostics.Process
      description: The process to be used
    return:
      type: System.Boolean
      description: Returns true if the process is 64bit and false if it is not.
    content.vb: Public Shared Function Is64Bit(process As Process) As Boolean
  overload: ERC.ProcessInfo.Is64Bit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List{System.String})
  commentId: M:ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List{System.String})
  id: SearchAllMemoryPPR(System.Collections.Generic.List{System.String})
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: SearchAllMemoryPPR(List<String>)
  nameWithType: ProcessInfo.SearchAllMemoryPPR(List<String>)
  fullName: ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List<System.String>)
  type: Method
  source:
    id: SearchAllMemoryPPR
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 739
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nSearches all memory associated with a given process and associated modules for POP X POP X RET instructions. \nPassing a list of module paths or names will exclude those modules from the search. \n"
  example: []
  syntax:
    content: public ErcResult<Dictionary<IntPtr, string>> SearchAllMemoryPPR(List<string> excludes = null)
    parameters:
    - id: excludes
      type: System.Collections.Generic.List{System.String}
      description: Takes a list of module names to be excluded from the search
    return:
      type: ERC.ErcResult{System.Collections.Generic.Dictionary{System.IntPtr,System.String}}
      description: Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found
    content.vb: Public Function SearchAllMemoryPPR(excludes As List(Of String) = Nothing) As ErcResult(Of Dictionary(Of IntPtr, String))
  overload: ERC.ProcessInfo.SearchAllMemoryPPR*
  nameWithType.vb: ProcessInfo.SearchAllMemoryPPR(List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ERC.ProcessInfo.SearchAllMemoryPPR(System.Collections.Generic.List(Of System.String))
  name.vb: SearchAllMemoryPPR(List(Of String))
- uid: ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[],System.Collections.Generic.List{System.String})
  commentId: M:ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[],System.Collections.Generic.List{System.String})
  id: SearchAllMemoryPPR(System.Byte[],System.Collections.Generic.List{System.String})
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: SearchAllMemoryPPR(Byte[], List<String>)
  nameWithType: ProcessInfo.SearchAllMemoryPPR(Byte[], List<String>)
  fullName: ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte[], System.Collections.Generic.List<System.String>)
  type: Method
  source:
    id: SearchAllMemoryPPR
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 887
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nSearches all memory associated with a given process and associated modules for POP X POP X RET instructions. \nPassing a list of module paths or names will exclude those modules from the search. \n"
  example: []
  syntax:
    content: public ErcResult<Dictionary<IntPtr, string>> SearchAllMemoryPPR(byte[] ptrsToExclude, List<string> excludes = null)
    parameters:
    - id: ptrsToExclude
      type: System.Byte[]
      description: Takes a byte array of values used to disqualify pointers
    - id: excludes
      type: System.Collections.Generic.List{System.String}
      description: Takes a list of module names to be excluded from the search
    return:
      type: ERC.ErcResult{System.Collections.Generic.Dictionary{System.IntPtr,System.String}}
      description: Returns an ERC_Result containing a dictionary of pointers and the main module in which they were found
    content.vb: Public Function SearchAllMemoryPPR(ptrsToExclude As Byte(), excludes As List(Of String) = Nothing) As ErcResult(Of Dictionary(Of IntPtr, String))
  overload: ERC.ProcessInfo.SearchAllMemoryPPR*
  nameWithType.vb: ProcessInfo.SearchAllMemoryPPR(Byte(), List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ERC.ProcessInfo.SearchAllMemoryPPR(System.Byte(), System.Collections.Generic.List(Of System.String))
  name.vb: SearchAllMemoryPPR(Byte(), List(Of String))
- uid: ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.String,System.Collections.Generic.List{System.String})
  commentId: M:ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.String,System.Collections.Generic.List{System.String})
  id: SearchMemory(System.Int32,System.Byte[],System.String,System.Collections.Generic.List{System.String})
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: SearchMemory(Int32, Byte[], String, List<String>)
  nameWithType: ProcessInfo.SearchMemory(Int32, Byte[], String, List<String>)
  fullName: ERC.ProcessInfo.SearchMemory(System.Int32, System.Byte[], System.String, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    id: SearchMemory
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 1040
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nSearches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.\nSpecific modules can be exclude through passing a Listof strings containing module names or paths.\n"
  example: []
  syntax:
    content: public ErcResult<Dictionary<IntPtr, string>> SearchMemory(int searchType, byte[] searchBytes = null, string searchString = null, List<string> excludes = null)
    parameters:
    - id: searchType
      type: System.Int32
      description: 0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32
    - id: searchBytes
      type: System.Byte[]
      description: Byte array to be searched for (optional)
    - id: searchString
      type: System.String
      description: String to be searched for (optional)
    - id: excludes
      type: System.Collections.Generic.List{System.String}
      description: Modules to be excluded from the search (optional)
    return:
      type: ERC.ErcResult{System.Collections.Generic.Dictionary{System.IntPtr,System.String}}
      description: Returns an ERC_Result containing pointers to all instances of the search query.
    content.vb: Public Function SearchMemory(searchType As Integer, searchBytes As Byte() = Nothing, searchString As String = Nothing, excludes As List(Of String) = Nothing) As ErcResult(Of Dictionary(Of IntPtr, String))
  overload: ERC.ProcessInfo.SearchMemory*
  nameWithType.vb: ProcessInfo.SearchMemory(Int32, Byte(), String, List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ERC.ProcessInfo.SearchMemory(System.Int32, System.Byte(), System.String, System.Collections.Generic.List(Of System.String))
  name.vb: SearchMemory(Int32, Byte(), String, List(Of String))
- uid: ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String})
  commentId: M:ERC.ProcessInfo.SearchMemory(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String})
  id: SearchMemory(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String})
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: SearchMemory(Int32, Byte[], Byte[], String, List<String>)
  nameWithType: ProcessInfo.SearchMemory(Int32, Byte[], Byte[], String, List<String>)
  fullName: ERC.ProcessInfo.SearchMemory(System.Int32, System.Byte[], System.Byte[], System.String, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    id: SearchMemory
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 1133
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nSearches all memory (the process and associated DLLs) for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.\nSpecific modules can be exclude through passing a Listof strings containing module names or paths.\n"
  example: []
  syntax:
    content: public ErcResult<Dictionary<IntPtr, string>> SearchMemory(int searchType, byte[] ptrsToExclude, byte[] searchBytes = null, string searchString = null, List<string> excludes = null)
    parameters:
    - id: searchType
      type: System.Int32
      description: 0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32
    - id: ptrsToExclude
      type: System.Byte[]
      description: Takes a byte array of values used to disqualify pointers
    - id: searchBytes
      type: System.Byte[]
      description: Byte array to be searched for (optional)
    - id: searchString
      type: System.String
      description: String to be searched for (optional)
    - id: excludes
      type: System.Collections.Generic.List{System.String}
      description: Modules to be excluded from the search (optional)
    return:
      type: ERC.ErcResult{System.Collections.Generic.Dictionary{System.IntPtr,System.String}}
      description: Returns an ERC_Result containing pointers to all instances of the search query.
    content.vb: Public Function SearchMemory(searchType As Integer, ptrsToExclude As Byte(), searchBytes As Byte() = Nothing, searchString As String = Nothing, excludes As List(Of String) = Nothing) As ErcResult(Of Dictionary(Of IntPtr, String))
  overload: ERC.ProcessInfo.SearchMemory*
  nameWithType.vb: ProcessInfo.SearchMemory(Int32, Byte(), Byte(), String, List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ERC.ProcessInfo.SearchMemory(System.Int32, System.Byte(), System.Byte(), System.String, System.Collections.Generic.List(Of System.String))
  name.vb: SearchMemory(Int32, Byte(), Byte(), String, List(Of String))
- uid: ERC.ProcessInfo.SearchModules(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})
  commentId: M:ERC.ProcessInfo.SearchModules(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})
  id: SearchModules(System.Int32,System.Byte[],System.Byte[],System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: SearchModules(Int32, Byte[], Byte[], String, List<String>, List<String>)
  nameWithType: ProcessInfo.SearchModules(Int32, Byte[], Byte[], String, List<String>, List<String>)
  fullName: ERC.ProcessInfo.SearchModules(System.Int32, System.Byte[], System.Byte[], System.String, System.Collections.Generic.List<System.String>, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    id: SearchModules
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 1232
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nSearches all modules loaded by a process for a specific string or byte array. Strings can be passed as ASCII, Unicode, UTF7 or UTF8.\nSearch can be limited to specific modules through passing a List of strings containing module names or paths.\n"
  example: []
  syntax:
    content: public ErcResult<Dictionary<IntPtr, string>> SearchModules(int searchType, byte[] ptrsToExclude = null, byte[] searchBytes = null, string searchString = null, List<string> includedModules = null, List<string> excludedModules = null)
    parameters:
    - id: searchType
      type: System.Int32
      description: 0 = search term is in bytes\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32
    - id: ptrsToExclude
      type: System.Byte[]
      description: Takes a byte array of values used to disqualify pointers
    - id: searchBytes
      type: System.Byte[]
      description: Byte array to be searched for (optional)
    - id: searchString
      type: System.String
      description: String to be searched for (optional)
    - id: includedModules
      type: System.Collections.Generic.List{System.String}
      description: Modules to be included in the search (optional)
    - id: excludedModules
      type: System.Collections.Generic.List{System.String}
      description: Modules to be excluded from the search (optional)
    return:
      type: ERC.ErcResult{System.Collections.Generic.Dictionary{System.IntPtr,System.String}}
      description: Returns an ERC_Result containing pointers to all instances of the search query.
    content.vb: Public Function SearchModules(searchType As Integer, ptrsToExclude As Byte() = Nothing, searchBytes As Byte() = Nothing, searchString As String = Nothing, includedModules As List(Of String) = Nothing, excludedModules As List(Of String) = Nothing) As ErcResult(Of Dictionary(Of IntPtr, String))
  overload: ERC.ProcessInfo.SearchModules*
  nameWithType.vb: ProcessInfo.SearchModules(Int32, Byte(), Byte(), String, List(Of String), List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ERC.ProcessInfo.SearchModules(System.Int32, System.Byte(), System.Byte(), System.String, System.Collections.Generic.List(Of System.String), System.Collections.Generic.List(Of System.String))
  name.vb: SearchModules(Int32, Byte(), Byte(), String, List(Of String), List(Of String))
- uid: ERC.ProcessInfo.FindNRP(System.Int32,System.Boolean)
  commentId: M:ERC.ProcessInfo.FindNRP(System.Int32,System.Boolean)
  id: FindNRP(System.Int32,System.Boolean)
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: FindNRP(Int32, Boolean)
  nameWithType: ProcessInfo.FindNRP(Int32, Boolean)
  fullName: ERC.ProcessInfo.FindNRP(System.Int32, System.Boolean)
  type: Method
  source:
    id: FindNRP
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 1319
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nSearches process registers and identifies pointers to buffers in memory containing a non repeating pattern. Functionality to identify SEH overwrites not yet implements.\n"
  example: []
  syntax:
    content: public ErcResult<List<RegisterInfo>> FindNRP(int searchType = 0, bool extended = false)
    parameters:
    - id: searchType
      type: System.Int32
      description: (Optional) 0 = search term is system default\n1 = search term is in unicode\n2 = search term is in ASCII\n3 = Search term is in UTF8\n4 = Search term is in UTF7\n5 = Search term is in UTF32
    - id: extended
      type: System.Boolean
      description: (Optional) Include additional characters in the pattern (!#$%^ etc) in the to be searched
    return:
      type: ERC.ErcResult{System.Collections.Generic.List{ERC.Structures.RegisterInfo}}
      description: Returns a ERC_Result containing a List of RegisterOffset
    content.vb: Public Function FindNRP(searchType As Integer = 0, extended As Boolean = False) As ErcResult(Of List(Of RegisterInfo))
  overload: ERC.ProcessInfo.FindNRP*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.CreateExcludesList(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:ERC.ProcessInfo.CreateExcludesList(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: CreateExcludesList(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: CreateExcludesList(Boolean, Boolean, Boolean, Boolean, Boolean)
  nameWithType: ProcessInfo.CreateExcludesList(Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName: ERC.ProcessInfo.CreateExcludesList(System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    id: CreateExcludesList
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 2151
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nCreates a list of modules to exclude from a search of memory.\n"
  example: []
  syntax:
    content: public List<string> CreateExcludesList(bool aslr = false, bool safeseh = false, bool rebase = false, bool nxcompat = false, bool osdll = false)
    parameters:
    - id: aslr
      type: System.Boolean
    - id: safeseh
      type: System.Boolean
    - id: rebase
      type: System.Boolean
    - id: nxcompat
      type: System.Boolean
    - id: osdll
      type: System.Boolean
    return:
      type: System.Collections.Generic.List{System.String}
      description: Returns an ErcResult containing a list of stringss
    content.vb: Public Function CreateExcludesList(aslr As Boolean = False, safeseh As Boolean = False, rebase As Boolean = False, nxcompat As Boolean = False, osdll As Boolean = False) As List(Of String)
  overload: ERC.ProcessInfo.CreateExcludesList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.ToString
  commentId: M:ERC.ProcessInfo.ToString
  id: ToString
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ProcessInfo.ToString()
  fullName: ERC.ProcessInfo.ToString()
  type: Method
  source:
    id: ToString
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 2193
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nOverride of the ToString method. Returns information about the process in a pleasantly formatted string\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: ERC.ProcessInfo.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: ERC.ProcessInfo.GetModuleHandles
  commentId: M:ERC.ProcessInfo.GetModuleHandles
  id: GetModuleHandles
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: GetModuleHandles()
  nameWithType: ProcessInfo.GetModuleHandles()
  fullName: ERC.ProcessInfo.GetModuleHandles()
  type: Method
  source:
    id: GetModuleHandles
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 2219
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nReturns a list of module handles associated with the process.\n"
  example: []
  syntax:
    content: public ErcResult<Dictionary<string, IntPtr>> GetModuleHandles()
    return:
      type: ERC.ErcResult{System.Collections.Generic.Dictionary{System.String,System.IntPtr}}
      description: Returns a dictionary containing the handle and path of each module
    content.vb: Public Function GetModuleHandles As ErcResult(Of Dictionary(Of String, IntPtr))
  overload: ERC.ProcessInfo.GetModuleHandles*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.GetProcessModuleInformation
  commentId: M:ERC.ProcessInfo.GetProcessModuleInformation
  id: GetProcessModuleInformation
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: GetProcessModuleInformation()
  nameWithType: ProcessInfo.GetProcessModuleInformation()
  fullName: ERC.ProcessInfo.GetProcessModuleInformation()
  type: Method
  source:
    id: GetProcessModuleInformation
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 2240
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nGets the list of ModuleInfo objects associated with the current process.\n"
  example: []
  syntax:
    content: public ErcResult<List<ModuleInfo>> GetProcessModuleInformation()
    return:
      type: ERC.ErcResult{System.Collections.Generic.List{ERC.ModuleInfo}}
      description: Returns an ErcResult containing a list of ModuleInfo objects
    content.vb: Public Function GetProcessModuleInformation As ErcResult(Of List(Of ModuleInfo))
  overload: ERC.ProcessInfo.GetProcessModuleInformation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.GetProcessThreadInformation
  commentId: M:ERC.ProcessInfo.GetProcessThreadInformation
  id: GetProcessThreadInformation
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: GetProcessThreadInformation()
  nameWithType: ProcessInfo.GetProcessThreadInformation()
  fullName: ERC.ProcessInfo.GetProcessThreadInformation()
  type: Method
  source:
    id: GetProcessThreadInformation
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 2261
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nGets the list of ThreadInfo objects associated with the current process.\n"
  example: []
  syntax:
    content: public ErcResult<List<ThreadInfo>> GetProcessThreadInformation()
    return:
      type: ERC.ErcResult{System.Collections.Generic.List{ERC.ThreadInfo}}
      description: Returns an ErcResult containing a list of ThreadInfo objects
    content.vb: Public Function GetProcessThreadInformation As ErcResult(Of List(Of ThreadInfo))
  overload: ERC.ProcessInfo.GetProcessThreadInformation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr,System.Int32)
  commentId: M:ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr,System.Int32)
  id: DumpMemoryRegion(System.IntPtr,System.Int32)
  parent: ERC.ProcessInfo
  langs:
  - csharp
  - vb
  name: DumpMemoryRegion(IntPtr, Int32)
  nameWithType: ProcessInfo.DumpMemoryRegion(IntPtr, Int32)
  fullName: ERC.ProcessInfo.DumpMemoryRegion(System.IntPtr, System.Int32)
  type: Method
  source:
    id: DumpMemoryRegion
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\Process_Info.cs
    startLine: 2284
  assemblies:
  - ERC.Net
  namespace: ERC
  summary: "\nReads process memory from a specific address for a set number of bytes. \n"
  example: []
  syntax:
    content: public ErcResult<byte[]> DumpMemoryRegion(IntPtr startAddress, int length)
    parameters:
    - id: startAddress
      type: System.IntPtr
      description: The address to start reading from.
    - id: length
      type: System.Int32
      description: Number of bytes to read.
    return:
      type: ERC.ErcResult{System.Byte[]}
      description: Returns a bytes array containing the specified contents of process memory.
    content.vb: Public Function DumpMemoryRegion(startAddress As IntPtr, length As Integer) As ErcResult(Of Byte())
  overload: ERC.ProcessInfo.DumpMemoryRegion*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: ERC
  commentId: N:ERC
  name: ERC
  nameWithType: ERC
  fullName: ERC
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: ERC.ErcCore
  commentId: T:ERC.ErcCore
  parent: ERC
  name: ErcCore
  nameWithType: ErcCore
  fullName: ERC.ErcCore
- uid: ERC.ErcCore.ErcVersion
  commentId: P:ERC.ErcCore.ErcVersion
  parent: ERC.ErcCore
  name: ErcVersion
  nameWithType: ErcCore.ErcVersion
  fullName: ERC.ErcCore.ErcVersion
- uid: ERC.ErcCore.WorkingDirectory
  commentId: P:ERC.ErcCore.WorkingDirectory
  parent: ERC.ErcCore
  name: WorkingDirectory
  nameWithType: ErcCore.WorkingDirectory
  fullName: ERC.ErcCore.WorkingDirectory
- uid: ERC.ErcCore.Author
  commentId: P:ERC.ErcCore.Author
  parent: ERC.ErcCore
  name: Author
  nameWithType: ErcCore.Author
  fullName: ERC.ErcCore.Author
- uid: ERC.ErcCore.SystemErrorLogPath
  commentId: P:ERC.ErcCore.SystemErrorLogPath
  parent: ERC.ErcCore
  name: SystemErrorLogPath
  nameWithType: ErcCore.SystemErrorLogPath
  fullName: ERC.ErcCore.SystemErrorLogPath
- uid: ERC.ErcCore.PatternStandardPath
  commentId: P:ERC.ErcCore.PatternStandardPath
  parent: ERC.ErcCore
  name: PatternStandardPath
  nameWithType: ErcCore.PatternStandardPath
  fullName: ERC.ErcCore.PatternStandardPath
- uid: ERC.ErcCore.PatternExtendedPath
  commentId: P:ERC.ErcCore.PatternExtendedPath
  parent: ERC.ErcCore
  name: PatternExtendedPath
  nameWithType: ErcCore.PatternExtendedPath
  fullName: ERC.ErcCore.PatternExtendedPath
- uid: ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)
  commentId: M:ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)
  parent: ERC.ErcCore
  isExternal: true
  name: GetHandleInformation(IntPtr, UInt32)
  nameWithType: ErcCore.GetHandleInformation(IntPtr, UInt32)
  fullName: ERC.ErcCore.GetHandleInformation(System.IntPtr, System.UInt32)
  spec.csharp:
  - uid: ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)
    name: GetHandleInformation
    nameWithType: ErcCore.GetHandleInformation
    fullName: ERC.ErcCore.GetHandleInformation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ERC.ErcCore.GetHandleInformation(System.IntPtr,System.UInt32@)
    name: GetHandleInformation
    nameWithType: ErcCore.GetHandleInformation
    fullName: ERC.ErcCore.GetHandleInformation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcCore.SetWorkingDirectory(System.String)
  commentId: M:ERC.ErcCore.SetWorkingDirectory(System.String)
  parent: ERC.ErcCore
  isExternal: true
  name: SetWorkingDirectory(String)
  nameWithType: ErcCore.SetWorkingDirectory(String)
  fullName: ERC.ErcCore.SetWorkingDirectory(System.String)
  spec.csharp:
  - uid: ERC.ErcCore.SetWorkingDirectory(System.String)
    name: SetWorkingDirectory
    nameWithType: ErcCore.SetWorkingDirectory
    fullName: ERC.ErcCore.SetWorkingDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ERC.ErcCore.SetWorkingDirectory(System.String)
    name: SetWorkingDirectory
    nameWithType: ErcCore.SetWorkingDirectory
    fullName: ERC.ErcCore.SetWorkingDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcCore.SetPatternStandardPath(System.String)
  commentId: M:ERC.ErcCore.SetPatternStandardPath(System.String)
  parent: ERC.ErcCore
  isExternal: true
  name: SetPatternStandardPath(String)
  nameWithType: ErcCore.SetPatternStandardPath(String)
  fullName: ERC.ErcCore.SetPatternStandardPath(System.String)
  spec.csharp:
  - uid: ERC.ErcCore.SetPatternStandardPath(System.String)
    name: SetPatternStandardPath
    nameWithType: ErcCore.SetPatternStandardPath
    fullName: ERC.ErcCore.SetPatternStandardPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ERC.ErcCore.SetPatternStandardPath(System.String)
    name: SetPatternStandardPath
    nameWithType: ErcCore.SetPatternStandardPath
    fullName: ERC.ErcCore.SetPatternStandardPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcCore.SetPatternExtendedPath(System.String)
  commentId: M:ERC.ErcCore.SetPatternExtendedPath(System.String)
  parent: ERC.ErcCore
  isExternal: true
  name: SetPatternExtendedPath(String)
  nameWithType: ErcCore.SetPatternExtendedPath(String)
  fullName: ERC.ErcCore.SetPatternExtendedPath(System.String)
  spec.csharp:
  - uid: ERC.ErcCore.SetPatternExtendedPath(System.String)
    name: SetPatternExtendedPath
    nameWithType: ErcCore.SetPatternExtendedPath
    fullName: ERC.ErcCore.SetPatternExtendedPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ERC.ErcCore.SetPatternExtendedPath(System.String)
    name: SetPatternExtendedPath
    nameWithType: ErcCore.SetPatternExtendedPath
    fullName: ERC.ErcCore.SetPatternExtendedPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcCore.SetAuthor(System.String)
  commentId: M:ERC.ErcCore.SetAuthor(System.String)
  parent: ERC.ErcCore
  isExternal: true
  name: SetAuthor(String)
  nameWithType: ErcCore.SetAuthor(String)
  fullName: ERC.ErcCore.SetAuthor(System.String)
  spec.csharp:
  - uid: ERC.ErcCore.SetAuthor(System.String)
    name: SetAuthor
    nameWithType: ErcCore.SetAuthor
    fullName: ERC.ErcCore.SetAuthor
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ERC.ErcCore.SetAuthor(System.String)
    name: SetAuthor
    nameWithType: ErcCore.SetAuthor
    fullName: ERC.ErcCore.SetAuthor
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcCore.SetErrorFile(System.String)
  commentId: M:ERC.ErcCore.SetErrorFile(System.String)
  parent: ERC.ErcCore
  isExternal: true
  name: SetErrorFile(String)
  nameWithType: ErcCore.SetErrorFile(String)
  fullName: ERC.ErcCore.SetErrorFile(System.String)
  spec.csharp:
  - uid: ERC.ErcCore.SetErrorFile(System.String)
    name: SetErrorFile
    nameWithType: ErcCore.SetErrorFile
    fullName: ERC.ErcCore.SetErrorFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ERC.ErcCore.SetErrorFile(System.String)
    name: SetErrorFile
    nameWithType: ErcCore.SetErrorFile
    fullName: ERC.ErcCore.SetErrorFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcCore.LogEvent(System.Exception)
  commentId: M:ERC.ErcCore.LogEvent(System.Exception)
  parent: ERC.ErcCore
  isExternal: true
  name: LogEvent(Exception)
  nameWithType: ErcCore.LogEvent(Exception)
  fullName: ERC.ErcCore.LogEvent(System.Exception)
  spec.csharp:
  - uid: ERC.ErcCore.LogEvent(System.Exception)
    name: LogEvent
    nameWithType: ErcCore.LogEvent
    fullName: ERC.ErcCore.LogEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ERC.ErcCore.LogEvent(System.Exception)
    name: LogEvent
    nameWithType: ErcCore.LogEvent
    fullName: ERC.ErcCore.LogEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ERC.ProcessInfo.ProcessName*
  commentId: Overload:ERC.ProcessInfo.ProcessName
  name: ProcessName
  nameWithType: ProcessInfo.ProcessName
  fullName: ERC.ProcessInfo.ProcessName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ERC.ProcessInfo.ProcessDescription*
  commentId: Overload:ERC.ProcessInfo.ProcessDescription
  name: ProcessDescription
  nameWithType: ProcessInfo.ProcessDescription
  fullName: ERC.ProcessInfo.ProcessDescription
- uid: ERC.ProcessInfo.ProcessPath*
  commentId: Overload:ERC.ProcessInfo.ProcessPath
  name: ProcessPath
  nameWithType: ProcessInfo.ProcessPath
  fullName: ERC.ProcessInfo.ProcessPath
- uid: ERC.ProcessInfo.ProcessID*
  commentId: Overload:ERC.ProcessInfo.ProcessID
  name: ProcessID
  nameWithType: ProcessInfo.ProcessID
  fullName: ERC.ProcessInfo.ProcessID
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ERC.ProcessInfo.ProcessHandle*
  commentId: Overload:ERC.ProcessInfo.ProcessHandle
  name: ProcessHandle
  nameWithType: ProcessInfo.ProcessHandle
  fullName: ERC.ProcessInfo.ProcessHandle
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: ERC.ProcessInfo.ProcessCurrent*
  commentId: Overload:ERC.ProcessInfo.ProcessCurrent
  name: ProcessCurrent
  nameWithType: ProcessInfo.ProcessCurrent
  fullName: ERC.ProcessInfo.ProcessCurrent
- uid: System.Diagnostics.Process
  commentId: T:System.Diagnostics.Process
  parent: System.Diagnostics
  isExternal: true
  name: Process
  nameWithType: Process
  fullName: System.Diagnostics.Process
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: true
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
- uid: ERC.ProcessInfo.ProcessMachineType*
  commentId: Overload:ERC.ProcessInfo.ProcessMachineType
  name: ProcessMachineType
  nameWithType: ProcessInfo.ProcessMachineType
  fullName: ERC.ProcessInfo.ProcessMachineType
- uid: ERC.MachineType
  commentId: T:ERC.MachineType
  parent: ERC
  name: MachineType
  nameWithType: MachineType
  fullName: ERC.MachineType
- uid: System.Collections.Generic.List{ERC.ModuleInfo}
  commentId: T:System.Collections.Generic.List{ERC.ModuleInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ModuleInfo>
  nameWithType: List<ModuleInfo>
  fullName: System.Collections.Generic.List<ERC.ModuleInfo>
  nameWithType.vb: List(Of ModuleInfo)
  fullName.vb: System.Collections.Generic.List(Of ERC.ModuleInfo)
  name.vb: List(Of ModuleInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ERC.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: ERC.ModuleInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ERC.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: ERC.ModuleInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{ERC.ThreadInfo}
  commentId: T:System.Collections.Generic.List{ERC.ThreadInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ThreadInfo>
  nameWithType: List<ThreadInfo>
  fullName: System.Collections.Generic.List<ERC.ThreadInfo>
  nameWithType.vb: List(Of ThreadInfo)
  fullName.vb: System.Collections.Generic.List(Of ERC.ThreadInfo)
  name.vb: List(Of ThreadInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ERC.ThreadInfo
    name: ThreadInfo
    nameWithType: ThreadInfo
    fullName: ERC.ThreadInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ERC.ThreadInfo
    name: ThreadInfo
    nameWithType: ThreadInfo
    fullName: ERC.ThreadInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ProcessInfo.#ctor*
  commentId: Overload:ERC.ProcessInfo.#ctor
  name: ProcessInfo
  nameWithType: ProcessInfo.ProcessInfo
  fullName: ERC.ProcessInfo.ProcessInfo
- uid: ERC.ProcessInfo
  commentId: T:ERC.ProcessInfo
  parent: ERC
  name: ProcessInfo
  nameWithType: ProcessInfo
  fullName: ERC.ProcessInfo
- uid: ERC.ProcessInfo.ListLocalProcesses*
  commentId: Overload:ERC.ProcessInfo.ListLocalProcesses
  name: ListLocalProcesses
  nameWithType: ProcessInfo.ListLocalProcesses
  fullName: ERC.ProcessInfo.ListLocalProcesses
- uid: ERC.ErcResult{System.Diagnostics.Process[]}
  commentId: T:ERC.ErcResult{System.Diagnostics.Process[]}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<Process[]>
  nameWithType: ErcResult<Process[]>
  fullName: ERC.ErcResult<System.Diagnostics.Process[]>
  nameWithType.vb: ErcResult(Of Process())
  fullName.vb: ERC.ErcResult(Of System.Diagnostics.Process())
  name.vb: ErcResult(Of Process())
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Process
    name: Process
    nameWithType: Process
    fullName: System.Diagnostics.Process
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Process
    name: Process
    nameWithType: Process
    fullName: System.Diagnostics.Process
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcResult`1
  commentId: T:ERC.ErcResult`1
  name: ErcResult<T>
  nameWithType: ErcResult<T>
  fullName: ERC.ErcResult<T>
  nameWithType.vb: ErcResult(Of T)
  fullName.vb: ERC.ErcResult(Of T)
  name.vb: ErcResult(Of T)
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ProcessInfo.ListRemoteProcesses*
  commentId: Overload:ERC.ProcessInfo.ListRemoteProcesses
  name: ListRemoteProcesses
  nameWithType: ProcessInfo.ListRemoteProcesses
  fullName: ERC.ProcessInfo.ListRemoteProcesses
- uid: ERC.ProcessInfo.GetProcessModules*
  commentId: Overload:ERC.ProcessInfo.GetProcessModules
  name: GetProcessModules
  nameWithType: ProcessInfo.GetProcessModules
  fullName: ERC.ProcessInfo.GetProcessModules
- uid: ERC.ErcResult{System.Collections.Generic.Dictionary{System.String,System.IntPtr}}
  commentId: T:ERC.ErcResult{System.Collections.Generic.Dictionary{System.String,System.IntPtr}}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<Dictionary<String, IntPtr>>
  nameWithType: ErcResult<Dictionary<String, IntPtr>>
  fullName: ERC.ErcResult<System.Collections.Generic.Dictionary<System.String, System.IntPtr>>
  nameWithType.vb: ErcResult(Of Dictionary(Of String, IntPtr))
  fullName.vb: ERC.ErcResult(Of System.Collections.Generic.Dictionary(Of System.String, System.IntPtr))
  name.vb: ErcResult(Of Dictionary(Of String, IntPtr))
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ProcessInfo.Is64Bit*
  commentId: Overload:ERC.ProcessInfo.Is64Bit
  name: Is64Bit
  nameWithType: ProcessInfo.Is64Bit
  fullName: ERC.ProcessInfo.Is64Bit
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: ERC.ProcessInfo.SearchAllMemoryPPR*
  commentId: Overload:ERC.ProcessInfo.SearchAllMemoryPPR
  name: SearchAllMemoryPPR
  nameWithType: ProcessInfo.SearchAllMemoryPPR
  fullName: ERC.ProcessInfo.SearchAllMemoryPPR
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcResult{System.Collections.Generic.Dictionary{System.IntPtr,System.String}}
  commentId: T:ERC.ErcResult{System.Collections.Generic.Dictionary{System.IntPtr,System.String}}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<Dictionary<IntPtr, String>>
  nameWithType: ErcResult<Dictionary<IntPtr, String>>
  fullName: ERC.ErcResult<System.Collections.Generic.Dictionary<System.IntPtr, System.String>>
  nameWithType.vb: ErcResult(Of Dictionary(Of IntPtr, String))
  fullName.vb: ERC.ErcResult(Of System.Collections.Generic.Dictionary(Of System.IntPtr, System.String))
  name.vb: ErcResult(Of Dictionary(Of IntPtr, String))
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: ERC.ProcessInfo.SearchMemory*
  commentId: Overload:ERC.ProcessInfo.SearchMemory
  name: SearchMemory
  nameWithType: ProcessInfo.SearchMemory
  fullName: ERC.ProcessInfo.SearchMemory
- uid: ERC.ProcessInfo.SearchModules*
  commentId: Overload:ERC.ProcessInfo.SearchModules
  name: SearchModules
  nameWithType: ProcessInfo.SearchModules
  fullName: ERC.ProcessInfo.SearchModules
- uid: ERC.ProcessInfo.FindNRP*
  commentId: Overload:ERC.ProcessInfo.FindNRP
  name: FindNRP
  nameWithType: ProcessInfo.FindNRP
  fullName: ERC.ProcessInfo.FindNRP
- uid: ERC.ErcResult{System.Collections.Generic.List{ERC.Structures.RegisterInfo}}
  commentId: T:ERC.ErcResult{System.Collections.Generic.List{ERC.Structures.RegisterInfo}}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<List<RegisterInfo>>
  nameWithType: ErcResult<List<RegisterInfo>>
  fullName: ERC.ErcResult<System.Collections.Generic.List<ERC.Structures.RegisterInfo>>
  nameWithType.vb: ErcResult(Of List(Of RegisterInfo))
  fullName.vb: ERC.ErcResult(Of System.Collections.Generic.List(Of ERC.Structures.RegisterInfo))
  name.vb: ErcResult(Of List(Of RegisterInfo))
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ERC.Structures.RegisterInfo
    name: RegisterInfo
    nameWithType: RegisterInfo
    fullName: ERC.Structures.RegisterInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ERC.Structures.RegisterInfo
    name: RegisterInfo
    nameWithType: RegisterInfo
    fullName: ERC.Structures.RegisterInfo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ProcessInfo.CreateExcludesList*
  commentId: Overload:ERC.ProcessInfo.CreateExcludesList
  name: CreateExcludesList
  nameWithType: ProcessInfo.CreateExcludesList
  fullName: ERC.ProcessInfo.CreateExcludesList
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ProcessInfo.ToString*
  commentId: Overload:ERC.ProcessInfo.ToString
  name: ToString
  nameWithType: ProcessInfo.ToString
  fullName: ERC.ProcessInfo.ToString
- uid: ERC.ProcessInfo.GetModuleHandles*
  commentId: Overload:ERC.ProcessInfo.GetModuleHandles
  name: GetModuleHandles
  nameWithType: ProcessInfo.GetModuleHandles
  fullName: ERC.ProcessInfo.GetModuleHandles
- uid: ERC.ProcessInfo.GetProcessModuleInformation*
  commentId: Overload:ERC.ProcessInfo.GetProcessModuleInformation
  name: GetProcessModuleInformation
  nameWithType: ProcessInfo.GetProcessModuleInformation
  fullName: ERC.ProcessInfo.GetProcessModuleInformation
- uid: ERC.ErcResult{System.Collections.Generic.List{ERC.ModuleInfo}}
  commentId: T:ERC.ErcResult{System.Collections.Generic.List{ERC.ModuleInfo}}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<List<ModuleInfo>>
  nameWithType: ErcResult<List<ModuleInfo>>
  fullName: ERC.ErcResult<System.Collections.Generic.List<ERC.ModuleInfo>>
  nameWithType.vb: ErcResult(Of List(Of ModuleInfo))
  fullName.vb: ERC.ErcResult(Of System.Collections.Generic.List(Of ERC.ModuleInfo))
  name.vb: ErcResult(Of List(Of ModuleInfo))
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ERC.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: ERC.ModuleInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ERC.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: ERC.ModuleInfo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ProcessInfo.GetProcessThreadInformation*
  commentId: Overload:ERC.ProcessInfo.GetProcessThreadInformation
  name: GetProcessThreadInformation
  nameWithType: ProcessInfo.GetProcessThreadInformation
  fullName: ERC.ProcessInfo.GetProcessThreadInformation
- uid: ERC.ErcResult{System.Collections.Generic.List{ERC.ThreadInfo}}
  commentId: T:ERC.ErcResult{System.Collections.Generic.List{ERC.ThreadInfo}}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<List<ThreadInfo>>
  nameWithType: ErcResult<List<ThreadInfo>>
  fullName: ERC.ErcResult<System.Collections.Generic.List<ERC.ThreadInfo>>
  nameWithType.vb: ErcResult(Of List(Of ThreadInfo))
  fullName.vb: ERC.ErcResult(Of System.Collections.Generic.List(Of ERC.ThreadInfo))
  name.vb: ErcResult(Of List(Of ThreadInfo))
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ERC.ThreadInfo
    name: ThreadInfo
    nameWithType: ThreadInfo
    fullName: ERC.ThreadInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ERC.ThreadInfo
    name: ThreadInfo
    nameWithType: ThreadInfo
    fullName: ERC.ThreadInfo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ProcessInfo.DumpMemoryRegion*
  commentId: Overload:ERC.ProcessInfo.DumpMemoryRegion
  name: DumpMemoryRegion
  nameWithType: ProcessInfo.DumpMemoryRegion
  fullName: ERC.ProcessInfo.DumpMemoryRegion
- uid: ERC.ErcResult{System.Byte[]}
  commentId: T:ERC.ErcResult{System.Byte[]}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<Byte[]>
  nameWithType: ErcResult<Byte[]>
  fullName: ERC.ErcResult<System.Byte[]>
  nameWithType.vb: ErcResult(Of Byte())
  fullName.vb: ERC.ErcResult(Of System.Byte())
  name.vb: ErcResult(Of Byte())
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
