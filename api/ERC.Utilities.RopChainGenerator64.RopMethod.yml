### YamlMime:ManagedReference
items:
- uid: ERC.Utilities.RopChainGenerator64.RopMethod
  commentId: T:ERC.Utilities.RopChainGenerator64.RopMethod
  id: RopChainGenerator64.RopMethod
  parent: ERC.Utilities
  children:
  - ERC.Utilities.RopChainGenerator64.RopMethod.All
  - ERC.Utilities.RopChainGenerator64.RopMethod.HeapCreate
  - ERC.Utilities.RopChainGenerator64.RopMethod.VirtualAlloc
  - ERC.Utilities.RopChainGenerator64.RopMethod.VirtualProtect
  - ERC.Utilities.RopChainGenerator64.RopMethod.WriteProcessMemory
  langs:
  - csharp
  - vb
  name: RopChainGenerator64.RopMethod
  nameWithType: RopChainGenerator64.RopMethod
  fullName: ERC.Utilities.RopChainGenerator64.RopMethod
  type: Enum
  source:
    id: RopMethod
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 4933
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nEnum of methods which can be used to generate a ROP chain.\n"
  example: []
  syntax:
    content: >-
      [Flags]

      public enum RopMethod : ushort
    content.vb: >-
      <Flags>

      Public Enum RopMethod As UShort
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: ERC.Utilities.RopChainGenerator64.RopMethod.VirtualAlloc
  commentId: F:ERC.Utilities.RopChainGenerator64.RopMethod.VirtualAlloc
  id: VirtualAlloc
  parent: ERC.Utilities.RopChainGenerator64.RopMethod
  langs:
  - csharp
  - vb
  name: VirtualAlloc
  nameWithType: RopChainGenerator64.RopMethod.VirtualAlloc
  fullName: ERC.Utilities.RopChainGenerator64.RopMethod.VirtualAlloc
  type: Field
  source:
    id: VirtualAlloc
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 4939
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nVirtualAlloc\n"
  example: []
  syntax:
    content: VirtualAlloc = 1
    return:
      type: ERC.Utilities.RopChainGenerator64.RopMethod
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ERC.Utilities.RopChainGenerator64.RopMethod.HeapCreate
  commentId: F:ERC.Utilities.RopChainGenerator64.RopMethod.HeapCreate
  id: HeapCreate
  parent: ERC.Utilities.RopChainGenerator64.RopMethod
  langs:
  - csharp
  - vb
  name: HeapCreate
  nameWithType: RopChainGenerator64.RopMethod.HeapCreate
  fullName: ERC.Utilities.RopChainGenerator64.RopMethod.HeapCreate
  type: Field
  source:
    id: HeapCreate
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 4943
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nHeapCreate\n"
  example: []
  syntax:
    content: HeapCreate = 2
    return:
      type: ERC.Utilities.RopChainGenerator64.RopMethod
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ERC.Utilities.RopChainGenerator64.RopMethod.VirtualProtect
  commentId: F:ERC.Utilities.RopChainGenerator64.RopMethod.VirtualProtect
  id: VirtualProtect
  parent: ERC.Utilities.RopChainGenerator64.RopMethod
  langs:
  - csharp
  - vb
  name: VirtualProtect
  nameWithType: RopChainGenerator64.RopMethod.VirtualProtect
  fullName: ERC.Utilities.RopChainGenerator64.RopMethod.VirtualProtect
  type: Field
  source:
    id: VirtualProtect
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 4947
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nVirtualProtect\n"
  example: []
  syntax:
    content: VirtualProtect = 4
    return:
      type: ERC.Utilities.RopChainGenerator64.RopMethod
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ERC.Utilities.RopChainGenerator64.RopMethod.WriteProcessMemory
  commentId: F:ERC.Utilities.RopChainGenerator64.RopMethod.WriteProcessMemory
  id: WriteProcessMemory
  parent: ERC.Utilities.RopChainGenerator64.RopMethod
  langs:
  - csharp
  - vb
  name: WriteProcessMemory
  nameWithType: RopChainGenerator64.RopMethod.WriteProcessMemory
  fullName: ERC.Utilities.RopChainGenerator64.RopMethod.WriteProcessMemory
  type: Field
  source:
    id: WriteProcessMemory
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 4951
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nWriteProcessMemory\n"
  example: []
  syntax:
    content: WriteProcessMemory = 8
    return:
      type: ERC.Utilities.RopChainGenerator64.RopMethod
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: ERC.Utilities.RopChainGenerator64.RopMethod.All
  commentId: F:ERC.Utilities.RopChainGenerator64.RopMethod.All
  id: All
  parent: ERC.Utilities.RopChainGenerator64.RopMethod
  langs:
  - csharp
  - vb
  name: All
  nameWithType: RopChainGenerator64.RopMethod.All
  fullName: ERC.Utilities.RopChainGenerator64.RopMethod.All
  type: Field
  source:
    id: All
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 4955
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nAll\n"
  example: []
  syntax:
    content: All = 15
    return:
      type: ERC.Utilities.RopChainGenerator64.RopMethod
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: ERC.Utilities
  commentId: N:ERC.Utilities
  name: ERC.Utilities
  nameWithType: ERC.Utilities
  fullName: ERC.Utilities
- uid: ERC.Utilities.RopChainGenerator64.RopMethod
  commentId: T:ERC.Utilities.RopChainGenerator64.RopMethod
  parent: ERC.Utilities
  name: RopChainGenerator64.RopMethod
  nameWithType: RopChainGenerator64.RopMethod
  fullName: ERC.Utilities.RopChainGenerator64.RopMethod
