### YamlMime:ManagedReference
items:
- uid: ERC.Utilities.RopChainGenerator64
  commentId: T:ERC.Utilities.RopChainGenerator64
  id: RopChainGenerator64
  parent: ERC.Utilities
  children:
  - ERC.Utilities.RopChainGenerator64.#ctor(ERC.ProcessInfo)
  - ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)
  - ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)
  - ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64(System.Byte[],System.Collections.Generic.List{System.String})
  - ERC.Utilities.RopChainGenerator64.HeapCreateChain
  - ERC.Utilities.RopChainGenerator64.VirtualAllocChain
  - ERC.Utilities.RopChainGenerator64.VirtualProtectChain
  - ERC.Utilities.RopChainGenerator64.WriteProcessMemoryChain
  langs:
  - csharp
  - vb
  name: RopChainGenerator64
  nameWithType: RopChainGenerator64
  fullName: ERC.Utilities.RopChainGenerator64
  type: Class
  source:
    id: RopChainGenerator64
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 9
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: 'Attempts to create Rop chains from 64 bit processes. '
  example: []
  syntax:
    content: public class RopChainGenerator64
    content.vb: Public Class RopChainGenerator64
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: ERC.Utilities.RopChainGenerator64.VirtualAllocChain
  commentId: F:ERC.Utilities.RopChainGenerator64.VirtualAllocChain
  id: VirtualAllocChain
  parent: ERC.Utilities.RopChainGenerator64
  langs:
  - csharp
  - vb
  name: VirtualAllocChain
  nameWithType: RopChainGenerator64.VirtualAllocChain
  fullName: ERC.Utilities.RopChainGenerator64.VirtualAllocChain
  type: Field
  source:
    id: VirtualAllocChain
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 17
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nContains a ROP chain which calls the VirtualAlloc method.\n"
  example: []
  syntax:
    content: public List<Tuple<byte[], string>> VirtualAllocChain
    return:
      type: System.Collections.Generic.List{System.Tuple{System.Byte[],System.String}}
    content.vb: Public VirtualAllocChain As List(Of Tuple(Of Byte(), String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.Utilities.RopChainGenerator64.HeapCreateChain
  commentId: F:ERC.Utilities.RopChainGenerator64.HeapCreateChain
  id: HeapCreateChain
  parent: ERC.Utilities.RopChainGenerator64
  langs:
  - csharp
  - vb
  name: HeapCreateChain
  nameWithType: RopChainGenerator64.HeapCreateChain
  fullName: ERC.Utilities.RopChainGenerator64.HeapCreateChain
  type: Field
  source:
    id: HeapCreateChain
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 22
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nContains a ROP chain which calls the VirtualAlloc method.\n"
  example: []
  syntax:
    content: public List<Tuple<byte[], string>> HeapCreateChain
    return:
      type: System.Collections.Generic.List{System.Tuple{System.Byte[],System.String}}
    content.vb: Public HeapCreateChain As List(Of Tuple(Of Byte(), String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.Utilities.RopChainGenerator64.VirtualProtectChain
  commentId: F:ERC.Utilities.RopChainGenerator64.VirtualProtectChain
  id: VirtualProtectChain
  parent: ERC.Utilities.RopChainGenerator64
  langs:
  - csharp
  - vb
  name: VirtualProtectChain
  nameWithType: RopChainGenerator64.VirtualProtectChain
  fullName: ERC.Utilities.RopChainGenerator64.VirtualProtectChain
  type: Field
  source:
    id: VirtualProtectChain
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 27
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nContains a ROP chain which calls the VirtualAlloc method.\n"
  example: []
  syntax:
    content: public List<Tuple<byte[], string>> VirtualProtectChain
    return:
      type: System.Collections.Generic.List{System.Tuple{System.Byte[],System.String}}
    content.vb: Public VirtualProtectChain As List(Of Tuple(Of Byte(), String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.Utilities.RopChainGenerator64.WriteProcessMemoryChain
  commentId: F:ERC.Utilities.RopChainGenerator64.WriteProcessMemoryChain
  id: WriteProcessMemoryChain
  parent: ERC.Utilities.RopChainGenerator64
  langs:
  - csharp
  - vb
  name: WriteProcessMemoryChain
  nameWithType: RopChainGenerator64.WriteProcessMemoryChain
  fullName: ERC.Utilities.RopChainGenerator64.WriteProcessMemoryChain
  type: Field
  source:
    id: WriteProcessMemoryChain
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 32
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nContains a ROP chain which calls the VirtualAlloc method.\n"
  example: []
  syntax:
    content: public List<Tuple<byte[], string>> WriteProcessMemoryChain
    return:
      type: System.Collections.Generic.List{System.Tuple{System.Byte[],System.String}}
    content.vb: Public WriteProcessMemoryChain As List(Of Tuple(Of Byte(), String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.Utilities.RopChainGenerator64.#ctor(ERC.ProcessInfo)
  commentId: M:ERC.Utilities.RopChainGenerator64.#ctor(ERC.ProcessInfo)
  id: '#ctor(ERC.ProcessInfo)'
  parent: ERC.Utilities.RopChainGenerator64
  langs:
  - csharp
  - vb
  name: RopChainGenerator64(ProcessInfo)
  nameWithType: RopChainGenerator64.RopChainGenerator64(ProcessInfo)
  fullName: ERC.Utilities.RopChainGenerator64.RopChainGenerator64(ERC.ProcessInfo)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 48
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public RopChainGenerator64(ProcessInfo _info)
    parameters:
    - id: _info
      type: ERC.ProcessInfo
      description: ProcessInfo object for which a ROP chain will be generated
    content.vb: Public Sub New(_info As ProcessInfo)
  overload: ERC.Utilities.RopChainGenerator64.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64(System.Byte[],System.Collections.Generic.List{System.String})
  commentId: M:ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64(System.Byte[],System.Collections.Generic.List{System.String})
  id: GenerateRopGadgets64(System.Byte[],System.Collections.Generic.List{System.String})
  parent: ERC.Utilities.RopChainGenerator64
  langs:
  - csharp
  - vb
  name: GenerateRopGadgets64(Byte[], List<String>)
  nameWithType: RopChainGenerator64.GenerateRopGadgets64(Byte[], List<String>)
  fullName: ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64(System.Byte[], System.Collections.Generic.List<System.String>)
  type: Method
  source:
    id: GenerateRopGadgets64
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 263
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nCreates a list of ROP gadgets for a specific process.\n"
  example: []
  syntax:
    content: public ErcResult<string> GenerateRopGadgets64(byte[] ptrsToExclude = null, List<string> excludes = null)
    parameters:
    - id: ptrsToExclude
      type: System.Byte[]
      description: Takes a byte array of values used to disqualify ROP gadgets
    - id: excludes
      type: System.Collections.Generic.List{System.String}
      description: A list of modules to be excluded from the search for ROP gadgets
    return:
      type: ERC.ErcResult{System.String}
      description: Returns an ErcResult string containing
    content.vb: Public Function GenerateRopGadgets64(ptrsToExclude As Byte() = Nothing, excludes As List(Of String) = Nothing) As ErcResult(Of String)
  overload: ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64*
  nameWithType.vb: RopChainGenerator64.GenerateRopGadgets64(Byte(), List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64(System.Byte(), System.Collections.Generic.List(Of System.String))
  name.vb: GenerateRopGadgets64(Byte(), List(Of String))
- uid: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)
  commentId: M:ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)
  id: GenerateRopChain64(System.Byte[],System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)
  parent: ERC.Utilities.RopChainGenerator64
  langs:
  - csharp
  - vb
  name: GenerateRopChain64(Byte[], Byte[], List<String>, RopChainGenerator64.RopMethod)
  nameWithType: RopChainGenerator64.GenerateRopChain64(Byte[], Byte[], List<String>, RopChainGenerator64.RopMethod)
  fullName: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[], System.Byte[], System.Collections.Generic.List<System.String>, ERC.Utilities.RopChainGenerator64.RopMethod)
  type: Method
  source:
    id: GenerateRopChain64
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 393
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nCreates a RopChain for a specific process.\n"
  example: []
  syntax:
    content: public ErcResult<string> GenerateRopChain64(byte[] ptrsToExclude, byte[] startAddress = null, List<string> excludes = null, RopChainGenerator64.RopMethod methods = RopChainGenerator64.RopMethod.All)
    parameters:
    - id: ptrsToExclude
      type: System.Byte[]
      description: Takes a byte array of values used to disqualify ROP gadgets
    - id: startAddress
      type: System.Byte[]
      description: A Address to be used as the start location for which memory will be made executable
    - id: excludes
      type: System.Collections.Generic.List{System.String}
      description: A list of modules to be excluded from the search for ROP gadgets
    - id: methods
      type: ERC.Utilities.RopChainGenerator64.RopMethod
      description: ushort indicating the ROP method to be utilizied. Can be omiited for all.
    return:
      type: ERC.ErcResult{System.String}
      description: Returns an ErcResult string containing
    content.vb: Public Function GenerateRopChain64(ptrsToExclude As Byte(), startAddress As Byte() = Nothing, excludes As List(Of String) = Nothing, methods As RopChainGenerator64.RopMethod = RopChainGenerator64.RopMethod.All) As ErcResult(Of String)
  overload: ERC.Utilities.RopChainGenerator64.GenerateRopChain64*
  nameWithType.vb: RopChainGenerator64.GenerateRopChain64(Byte(), Byte(), List(Of String), RopChainGenerator64.RopMethod)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte(), System.Byte(), System.Collections.Generic.List(Of System.String), ERC.Utilities.RopChainGenerator64.RopMethod)
  name.vb: GenerateRopChain64(Byte(), Byte(), List(Of String), RopChainGenerator64.RopMethod)
- uid: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)
  commentId: M:ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)
  id: GenerateRopChain64(System.Byte[],System.Collections.Generic.List{System.String},ERC.Utilities.RopChainGenerator64.RopMethod)
  parent: ERC.Utilities.RopChainGenerator64
  langs:
  - csharp
  - vb
  name: GenerateRopChain64(Byte[], List<String>, RopChainGenerator64.RopMethod)
  nameWithType: RopChainGenerator64.GenerateRopChain64(Byte[], List<String>, RopChainGenerator64.RopMethod)
  fullName: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte[], System.Collections.Generic.List<System.String>, ERC.Utilities.RopChainGenerator64.RopMethod)
  type: Method
  source:
    id: GenerateRopChain64
    path: C:\Users\Andy\Documents\GitHub\ERC.net\ERC\RopChainGenerator64.cs
    startLine: 564
  assemblies:
  - ERC.Net
  namespace: ERC.Utilities
  summary: "\nCreates a RopChain for a specific process.\n"
  example: []
  syntax:
    content: public ErcResult<string> GenerateRopChain64(byte[] startAddress = null, List<string> excludes = null, RopChainGenerator64.RopMethod methods = RopChainGenerator64.RopMethod.All)
    parameters:
    - id: startAddress
      type: System.Byte[]
      description: A Address to be used as the start location for which memory will be made executable
    - id: excludes
      type: System.Collections.Generic.List{System.String}
      description: A list of modules to be excluded from the search for ROP gadgets
    - id: methods
      type: ERC.Utilities.RopChainGenerator64.RopMethod
      description: ushort indicating the ROP method to be utilizied. Can be omiited for all.
    return:
      type: ERC.ErcResult{System.String}
      description: Returns an ErcResult string containing
    content.vb: Public Function GenerateRopChain64(startAddress As Byte() = Nothing, excludes As List(Of String) = Nothing, methods As RopChainGenerator64.RopMethod = RopChainGenerator64.RopMethod.All) As ErcResult(Of String)
  overload: ERC.Utilities.RopChainGenerator64.GenerateRopChain64*
  nameWithType.vb: RopChainGenerator64.GenerateRopChain64(Byte(), List(Of String), RopChainGenerator64.RopMethod)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ERC.Utilities.RopChainGenerator64.GenerateRopChain64(System.Byte(), System.Collections.Generic.List(Of System.String), ERC.Utilities.RopChainGenerator64.RopMethod)
  name.vb: GenerateRopChain64(Byte(), List(Of String), RopChainGenerator64.RopMethod)
references:
- uid: ERC.Utilities
  commentId: N:ERC.Utilities
  name: ERC.Utilities
  nameWithType: ERC.Utilities
  fullName: ERC.Utilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{System.Tuple{System.Byte[],System.String}}
  commentId: T:System.Collections.Generic.List{System.Tuple{System.Byte[],System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Tuple<Byte[], String>>
  nameWithType: List<Tuple<Byte[], String>>
  fullName: System.Collections.Generic.List<System.Tuple<System.Byte[], System.String>>
  nameWithType.vb: List(Of Tuple(Of Byte(), String))
  fullName.vb: System.Collections.Generic.List(Of System.Tuple(Of System.Byte(), System.String))
  name.vb: List(Of Tuple(Of Byte(), String))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: ERC.Utilities.RopChainGenerator64.#ctor*
  commentId: Overload:ERC.Utilities.RopChainGenerator64.#ctor
  name: RopChainGenerator64
  nameWithType: RopChainGenerator64.RopChainGenerator64
  fullName: ERC.Utilities.RopChainGenerator64.RopChainGenerator64
- uid: ERC.ProcessInfo
  commentId: T:ERC.ProcessInfo
  parent: ERC
  name: ProcessInfo
  nameWithType: ProcessInfo
  fullName: ERC.ProcessInfo
- uid: ERC
  commentId: N:ERC
  name: ERC
  nameWithType: ERC
  fullName: ERC
- uid: ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64*
  commentId: Overload:ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64
  name: GenerateRopGadgets64
  nameWithType: RopChainGenerator64.GenerateRopGadgets64
  fullName: ERC.Utilities.RopChainGenerator64.GenerateRopGadgets64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcResult{System.String}
  commentId: T:ERC.ErcResult{System.String}
  parent: ERC
  definition: ERC.ErcResult`1
  name: ErcResult<String>
  nameWithType: ErcResult<String>
  fullName: ERC.ErcResult<System.String>
  nameWithType.vb: ErcResult(Of String)
  fullName.vb: ERC.ErcResult(Of System.String)
  name.vb: ErcResult(Of String)
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.ErcResult`1
  commentId: T:ERC.ErcResult`1
  name: ErcResult<T>
  nameWithType: ErcResult<T>
  fullName: ERC.ErcResult<T>
  nameWithType.vb: ErcResult(Of T)
  fullName.vb: ERC.ErcResult(Of T)
  name.vb: ErcResult(Of T)
  spec.csharp:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ERC.ErcResult`1
    name: ErcResult
    nameWithType: ErcResult
    fullName: ERC.ErcResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ERC.Utilities.RopChainGenerator64.GenerateRopChain64*
  commentId: Overload:ERC.Utilities.RopChainGenerator64.GenerateRopChain64
  name: GenerateRopChain64
  nameWithType: RopChainGenerator64.GenerateRopChain64
  fullName: ERC.Utilities.RopChainGenerator64.GenerateRopChain64
- uid: ERC.Utilities.RopChainGenerator64.RopMethod
  commentId: T:ERC.Utilities.RopChainGenerator64.RopMethod
  parent: ERC.Utilities
  name: RopChainGenerator64.RopMethod
  nameWithType: RopChainGenerator64.RopMethod
  fullName: ERC.Utilities.RopChainGenerator64.RopMethod
