<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Reloaded.Assembler</name>
    </assembly>
    <members>
        <member name="T:Reloaded.Assembler.Assembler">
            <summary>
            Assembler class allows you to assemble X86 and X64 mnemonics using FASM.
            </summary>
        </member>
        <member name="M:Reloaded.Assembler.Assembler.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the FASM assembler.
            </summary>
            <param name="textSize">
                The minimum size of the buffer to be used for passing the
                text to be assembled to FASM Assembler.
            </param>
            <param name="resultSize">
                The minimum size of the buffer to be used for FASM to return the
                text to be assembled.
            </param>
        </member>
        <member name="M:Reloaded.Assembler.Assembler.Finalize">
            <summary>
            Destroys this instance of the class.
            </summary>
        </member>
        <member name="M:Reloaded.Assembler.Assembler.GetVersion">
            <summary>
            Retrieves the version of the internally used FASM assembler DLL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Reloaded.Assembler.Assembler.AssembleFile(System.String)">
            <summary>
            Assembles a file at a given path.
            </summary>
            <param name="filePath">The path of the file to be assembled.</param>
            <returns>The assembled file.</returns>
        </member>
        <member name="M:Reloaded.Assembler.Assembler.Assemble(System.Collections.Generic.IEnumerable{System.String},System.UInt16)">
            <summary>
            Assembles the given mnemonics.
            </summary>
            <param name="mnemonics">The mnemonics to assemble, with each line being represented as a string in the array.</param>
            <param name="passLimit">The maximum number of passes to perform when assembling data.</param>
        </member>
        <member name="M:Reloaded.Assembler.Assembler.Assemble(System.String,System.UInt16)">
            <summary>
            Assembles the given mnemonics.
            </summary>
            <param name="mnemonics">The mnemonics to assemble; delimited by new line \n for each new instruction.</param>
            <param name="passLimit">The maximum number of passes to perform when assembling data.</param>
            <exception cref="T:Reloaded.Assembler.FasmWrapperException">Your text to be assembled is too large to fit in the preallocated region for program text.</exception>
            <exception cref="T:Reloaded.Assembler.Definitions.FasmException">An error thrown by the native FASM compiler.</exception>
        </member>
        <member name="M:Reloaded.Assembler.Assembler.Dispose">
            <summary>
            Releases the allocated memory for the assembler.
            </summary>
        </member>
        <member name="M:Reloaded.Assembler.Assembler.AllocateText(System.Int32,System.Int32,Reloaded.Memory.Buffers.MemoryBufferHelper)">
            <summary>
            Attempts to allocate the memory to store the text to be supplied to FASM assembler.
            </summary>
        </member>
        <member name="M:Reloaded.Assembler.Assembler.AllocateResult(System.Int32,System.Int32,Reloaded.Memory.Buffers.MemoryBufferHelper)">
            <summary>
            Attempts to allocate the memory to store the result received from FASM assembler.
            </summary>
        </member>
        <member name="T:Reloaded.Assembler.Definitions.FasmErrors">
            <summary>
            Lists all FASM Assembler Errors
            </summary>
        </member>
        <member name="T:Reloaded.Assembler.Definitions.FasmException">
            <summary/>
        </member>
        <member name="P:Reloaded.Assembler.Definitions.FasmException.ErrorCode">
            <summary>
            The specific error code that triggered the exception.
            </summary>
        </member>
        <member name="P:Reloaded.Assembler.Definitions.FasmException.Result">
            <summary>
            The condition of the Assembler.
            </summary>
        </member>
        <member name="P:Reloaded.Assembler.Definitions.FasmException.Line">
            <summary>
            The line that caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Reloaded.Assembler.Definitions.FasmException.Mnemonics">
            <summary>
            The original supplied text to be assembled that thrown the exception.
            </summary>
        </member>
        <member name="M:Reloaded.Assembler.Definitions.FasmException.#ctor(Reloaded.Assembler.Definitions.FasmErrors,Reloaded.Assembler.Definitions.FasmResult,System.Int32,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Reloaded.Assembler.Definitions.FasmException" /> class.
            </summary>
        </member>
        <member name="T:Reloaded.Assembler.Definitions.FasmLineHeader">
            <summary/>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmLineHeader.FilePathPtr">
            <summary>
            32bit pointer to the file path of the source file.
            </summary>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmLineHeader.LineNumber">
            <summary/>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmLineHeader.FileOffset">
            <summary/>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmLineHeader.MacroCallingFilePtr">
            <summary>
            32bit pointer to the LINE_HEADER structure for the line which called the macroinstruction.
            </summary>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmLineHeader.MacroLinePtr">
            <summary>
            32bit pointer to the LINE_HEADER structure for the line within the definition of macroinstruction, which generated this one.
            </summary>
        </member>
        <member name="T:Reloaded.Assembler.Definitions.FasmResult">
            <summary/>
        </member>
        <member name="T:Reloaded.Assembler.Definitions.FasmState">
            <summary>
            Defines the state of the FASM assembler after an assembly operation.
            </summary>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmState.Condition">
            <summary/>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmState.OutputLength">
            <summary/>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmState.ErrorCode">
            <summary/>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmState.OutputData">
            <summary>
            32bit pointer to the output bytes.
            </summary>
        </member>
        <member name="F:Reloaded.Assembler.Definitions.FasmState.ErrorLine">
            <summary>
            32bit pointer to the <see cref="T:Reloaded.Assembler.Definitions.FasmLineHeader"/> struct.
            </summary>
        </member>
        <member name="M:Reloaded.Assembler.Definitions.FasmState.GetLineHeader">
            <summary>
            Retrieves the <see cref="T:Reloaded.Assembler.Definitions.FasmLineHeader"/> struct from memory.
            </summary>
        </member>
        <member name="T:Reloaded.Assembler.FasmDelegates">
            <summary/>
        </member>
        <member name="T:Reloaded.Assembler.FasmDelegates.fasm_GetVersion">
            <summary>
            Returns the version of the FASM compiler inside FASM.DLL
            </summary>
            <returns>The return value is a double word containing the major version in lower 16 bits, and minor version in the higher 16 bits.</returns>
        </member>
        <member name="T:Reloaded.Assembler.FasmDelegates.fasm_Assemble">
            <summary>
            The native function to assemble mnemonics of FASM compiler embedded in Fasm.obj.
            </summary>
            <param name="lpSource">Contains a pointer to zero-ended source text.</param>
            <param name="lpMemory">The pointer to a buffer used to assemble mnemonics.</param>
            <param name="nSize">The memory size allocated for the buffer.</param>
            <param name="nPassesLimit">A value in range from 1 to 65536, defining
            the maximum number of passes the assembler can perform in order to generate the code.</param>
            <param name="hDisplayPipe">The hDisplayPipe should contain handle of the pipe, to which the output of DISPLAY directives will be written.</param>
            <returns>The return value is a <see cref="T:Reloaded.Assembler.Definitions.FasmResult"/> enum instance.</returns>
        </member>
        <member name="T:Reloaded.Assembler.FasmWrapperException">
            <summary/>
        </member>
        <member name="M:Reloaded.Assembler.FasmWrapperException.#ctor">
            <summary/>
        </member>
        <member name="M:Reloaded.Assembler.FasmWrapperException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:Reloaded.Assembler.FasmWrapperException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:Reloaded.Assembler.FasmWrapperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:Reloaded.Assembler.Kernel32.Kernel32">
            <summary/>
        </member>
        <member name="M:Reloaded.Assembler.Kernel32.Kernel32.LoadLibraryW(System.String)">
            <summary>
            <para>
            Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
            </para>
            <para>For additional load options, use the <c>LoadLibraryEx</c> function.</para>
            </summary>
            <param name="lpFileName">
            <para>
            The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). The name
            specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the
            <c>LIBRARY</c> keyword in the module-definition (.def) file.
            </para>
            <para>If the string specifies a full path, the function searches only that path for the module.</para>
            <para>
            If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the
            module; for more information, see the Remarks.
            </para>
            <para>
            If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\), not forward
            slashes (/). For more information about paths, see Naming a File or Directory.
            </para>
            <para>
            If the string specifies a module name without a path and the file name extension is omitted, the function appends the default
            library extension .dll to the module name. To prevent the function from appending .dll to the module name, include a trailing
            point character (.) in the module name string.
            </para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the module.</para>
            <para>If the function fails, the return value is NULL. To get extended error information, call <c>GetLastError</c>.</para>
            </returns>
        </member>
        <member name="M:Reloaded.Assembler.Kernel32.Kernel32.GetProcAddress(System.IntPtr,System.String)">
            <summary>Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).</summary>
            <param name="hModule">
            <para>
            A handle to the DLL module that contains the function or variable. The <c>LoadLibrary</c>, <c>LoadLibraryEx</c>,
            <c>LoadPackagedLibrary</c>, or <c>GetModuleHandle</c> function returns this handle.
            </para>
            <para>
            The <c>GetProcAddress</c> function does not retrieve addresses from modules that were loaded using the
            <c>LOAD_LIBRARY_AS_DATAFILE</c> flag. For more information, see <c>LoadLibraryEx</c>.
            </para>
            </param>
            <param name="lpProcName">
            The function or variable name, or the function's ordinal value. If this parameter is an ordinal value, it must be in the
            low-order word; the high-order word must be zero.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the address of the exported function or variable.</para>
            <para>If the function fails, the return value is NULL. To get extended error information, call <c>GetLastError</c>.</para>
            </returns>
        </member>
    </members>
</doc>
